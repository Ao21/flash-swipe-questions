"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

(function (u, r) {
	"function" === typeof define && define.amd ? define([], r) : "object" === (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = r() : u.anime = r();
})(undefined, function () {
	var u = { duration: 1E3, delay: 0, loop: !1, autoplay: !0, direction: "normal", easing: "easeOutElastic", elasticity: 400, round: !1, begin: void 0, update: void 0, complete: void 0 },
	    r = "translateX translateY translateZ rotate rotateX rotateY rotateZ scale scaleX scaleY scaleZ skewX skewY".split(" "),
	    y,
	    f = {
		arr: function arr(a) {
			return Array.isArray(a);
		}, obj: function obj(a) {
			return -1 < Object.prototype.toString.call(a).indexOf("Object");
		}, svg: function svg(a) {
			return a instanceof SVGElement;
		}, dom: function dom(a) {
			return a.nodeType || f.svg(a);
		}, num: function num(a) {
			return !isNaN(parseInt(a));
		}, str: function str(a) {
			return "string" === typeof a;
		}, fnc: function fnc(a) {
			return "function" === typeof a;
		}, und: function und(a) {
			return "undefined" === typeof a;
		}, nul: function nul(a) {
			return "null" === typeof a;
		}, hex: function hex(a) {
			return (/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a)
			);
		}, rgb: function rgb(a) {
			return (/^rgb/.test(a)
			);
		}, hsl: function hsl(a) {
			return (/^hsl/.test(a)
			);
		},
		col: function col(a) {
			return f.hex(a) || f.rgb(a) || f.hsl(a);
		} },
	    D = function () {
		var a = {},
		    b = { Sine: function Sine(a) {
				return 1 - Math.cos(a * Math.PI / 2);
			}, Circ: function Circ(a) {
				return 1 - Math.sqrt(1 - a * a);
			}, Elastic: function Elastic(a, b) {
				if (0 === a || 1 === a) return a;var d = 1 - Math.min(b, 998) / 1E3,
				    g = a / 1 - 1;return -(Math.pow(2, 10 * g) * Math.sin(2 * (g - d / (2 * Math.PI) * Math.asin(1)) * Math.PI / d));
			}, Back: function Back(a) {
				return a * a * (3 * a - 2);
			}, Bounce: function Bounce(a) {
				for (var b, d = 4; a < ((b = Math.pow(2, --d)) - 1) / 11;) {}return 1 / Math.pow(4, 3 - d) - 7.5625 * Math.pow((3 * b - 2) / 22 - a, 2);
			} };["Quad", "Cubic", "Quart", "Quint", "Expo"].forEach(function (a, e) {
			b[a] = function (a) {
				return Math.pow(a, e + 2);
			};
		});Object.keys(b).forEach(function (c) {
			var e = b[c];a["easeIn" + c] = e;a["easeOut" + c] = function (a, b) {
				return 1 - e(1 - a, b);
			};a["easeInOut" + c] = function (a, b) {
				return .5 > a ? e(2 * a, b) / 2 : 1 - e(-2 * a + 2, b) / 2;
			};a["easeOutIn" + c] = function (a, b) {
				return .5 > a ? (1 - e(1 - 2 * a, b)) / 2 : (e(2 * a - 1, b) + 1) / 2;
			};
		});a.linear = function (a) {
			return a;
		};return a;
	}(),
	    z = function z(a) {
		return f.str(a) ? a : a + "";
	},
	    E = function E(a) {
		return a.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
	},
	    F = function F(a) {
		if (f.col(a)) return !1;try {
			return document.querySelectorAll(a);
		} catch (b) {
			return !1;
		}
	},
	    A = function A(a) {
		return a.reduce(function (a, c) {
			return a.concat(f.arr(c) ? A(c) : c);
		}, []);
	},
	    t = function t(a) {
		if (f.arr(a)) return a;f.str(a) && (a = F(a) || a);return a instanceof NodeList || a instanceof HTMLCollection ? [].slice.call(a) : [a];
	},
	    G = function G(a, b) {
		return a.some(function (a) {
			return a === b;
		});
	},
	    R = function R(a, b) {
		var c = {};a.forEach(function (a) {
			var d = JSON.stringify(b.map(function (b) {
				return a[b];
			}));c[d] = c[d] || [];c[d].push(a);
		});
		return Object.keys(c).map(function (a) {
			return c[a];
		});
	},
	    H = function H(a) {
		return a.filter(function (a, c, e) {
			return e.indexOf(a) === c;
		});
	},
	    B = function B(a) {
		var b = {},
		    c;for (c in a) {
			b[c] = a[c];
		}return b;
	},
	    v = function v(a, b) {
		for (var c in b) {
			a[c] = f.und(a[c]) ? b[c] : a[c];
		}return a;
	},
	    S = function S(a) {
		a = a.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, function (a, b, c, m) {
			return b + b + c + c + m + m;
		});var b = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(a);a = parseInt(b[1], 16);var c = parseInt(b[2], 16),
		    b = parseInt(b[3], 16);return "rgb(" + a + "," + c + "," + b + ")";
	},
	    T = function T(a) {
		a = /hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(a);var b = parseInt(a[1]) / 360,
		    c = parseInt(a[2]) / 100,
		    e = parseInt(a[3]) / 100;a = function a(_a, b, c) {
			0 > c && (c += 1);1 < c && --c;return c < 1 / 6 ? _a + 6 * (b - _a) * c : .5 > c ? b : c < 2 / 3 ? _a + (b - _a) * (2 / 3 - c) * 6 : _a;
		};if (0 == c) c = e = b = e;else var d = .5 > e ? e * (1 + c) : e + c - e * c,
		    g = 2 * e - d,
		    c = a(g, d, b + 1 / 3),
		    e = a(g, d, b),
		    b = a(g, d, b - 1 / 3);return "rgb(" + 255 * c + "," + 255 * e + "," + 255 * b + ")";
	},
	    p = function p(a) {
		return (/([\+\-]?[0-9|auto\.]+)(%|px|pt|em|rem|in|cm|mm|ex|pc|vw|vh|deg)?/.exec(a)[2]
		);
	},
	    I = function I(a, b, c) {
		return p(b) ? b : -1 < a.indexOf("translate") ? p(c) ? b + p(c) : b + "px" : -1 < a.indexOf("rotate") || -1 < a.indexOf("skew") ? b + "deg" : b;
	},
	    w = function w(a, b) {
		if (b in a.style) return getComputedStyle(a).getPropertyValue(E(b)) || "0";
	},
	    U = function U(a, b) {
		var c = -1 < b.indexOf("scale") ? 1 : 0,
		    e = a.style.transform;if (!e) return c;for (var d = /(\w+)\((.+?)\)/g, g = [], m = [], f = []; g = d.exec(e);) {
			m.push(g[1]), f.push(g[2]);
		}e = f.filter(function (a, c) {
			return m[c] === b;
		});return e.length ? e[0] : c;
	},
	    J = function J(a, b) {
		if (f.dom(a) && G(r, b)) return "transform";if (f.dom(a) && (a.getAttribute(b) || f.svg(a) && a[b])) return "attribute";if (f.dom(a) && "transform" !== b && w(a, b)) return "css";if (!f.nul(a[b]) && !f.und(a[b])) return "object";
	},
	    K = function K(a, b) {
		switch (J(a, b)) {case "transform":
				return U(a, b);case "css":
				return w(a, b);case "attribute":
				return a.getAttribute(b);}return a[b] || 0;
	},
	    L = function L(a, b, c) {
		if (f.col(b)) return b = f.rgb(b) ? b : f.hex(b) ? S(b) : f.hsl(b) ? T(b) : void 0, b;if (p(b)) return b;a = p(a.to) ? p(a.to) : p(a.from);!a && c && (a = p(c));return a ? b + a : b;
	},
	    M = function M(a) {
		var b = /-?\d*\.?\d+/g;return { original: a, numbers: z(a).match(b) ? z(a).match(b).map(Number) : [0], strings: z(a).split(b) };
	},
	    V = function V(a, b, c) {
		return b.reduce(function (b, d, g) {
			d = d ? d : c[g - 1];return b + a[g - 1] + d;
		});
	},
	    W = function W(a) {
		a = a ? A(f.arr(a) ? a.map(t) : t(a)) : [];return a.map(function (a, c) {
			return { target: a, id: c };
		});
	},
	    N = function N(a, b, c, e) {
		"transform" === c ? (c = a + "(" + I(a, b.from, b.to) + ")", b = a + "(" + I(a, b.to) + ")") : (a = "css" === c ? w(e, a) : void 0, c = L(b, b.from, a), b = L(b, b.to, a));return { from: M(c), to: M(b) };
	},
	    X = function X(a, b) {
		var c = [];a.forEach(function (e, d) {
			var g = e.target;return b.forEach(function (b) {
				var l = J(g, b.name);if (l) {
					var q;q = b.name;var h = b.value,
					    h = t(f.fnc(h) ? h(g, d) : h);q = { from: 1 < h.length ? h[0] : K(g, q), to: 1 < h.length ? h[1] : h[0] };h = B(b);h.animatables = e;h.type = l;h.from = N(b.name, q, h.type, g).from;h.to = N(b.name, q, h.type, g).to;h.round = f.col(q.from) || h.round ? 1 : 0;h.delay = (f.fnc(h.delay) ? h.delay(g, d, a.length) : h.delay) / k.speed;h.duration = (f.fnc(h.duration) ? h.duration(g, d, a.length) : h.duration) / k.speed;c.push(h);
				}
			});
		});return c;
	},
	    Y = function Y(a, b) {
		var c = X(a, b);return R(c, ["name", "from", "to", "delay", "duration"]).map(function (a) {
			var b = B(a[0]);b.animatables = a.map(function (a) {
				return a.animatables;
			});b.totalDuration = b.delay + b.duration;return b;
		});
	},
	    C = function C(a, b) {
		a.tweens.forEach(function (c) {
			var e = c.from,
			    d = a.duration - (c.delay + c.duration);c.from = c.to;c.to = e;b && (c.delay = d);
		});a.reversed = a.reversed ? !1 : !0;
	},
	    Z = function Z(a) {
		if (a.length) return Math.max.apply(Math, a.map(function (a) {
			return a.totalDuration;
		}));
	},
	    O = function O(a) {
		var b = [],
		    c = [];a.tweens.forEach(function (a) {
			if ("css" === a.type || "transform" === a.type) b.push("css" === a.type ? E(a.name) : "transform"), a.animatables.forEach(function (a) {
				c.push(a.target);
			});
		});return { properties: H(b).join(", "), elements: H(c) };
	},
	    aa = function aa(a) {
		var b = O(a);b.elements.forEach(function (a) {
			a.style.willChange = b.properties;
		});
	},
	    ba = function ba(a) {
		O(a).elements.forEach(function (a) {
			a.style.removeProperty("will-change");
		});
	},
	    ca = function ca(a, b) {
		var c = a.path,
		    e = a.value * b,
		    d = function d(_d) {
			_d = _d || 0;return c.getPointAtLength(1 < b ? a.value + _d : e + _d);
		},
		    g = d(),
		    f = d(-1),
		    d = d(1);switch (a.name) {case "translateX":
				return g.x;case "translateY":
				return g.y;case "rotate":
				return 180 * Math.atan2(d.y - f.y, d.x - f.x) / Math.PI;}
	},
	    da = function da(a, b) {
		var c = Math.min(Math.max(b - a.delay, 0), a.duration) / a.duration,
		    e = a.to.numbers.map(function (b, e) {
			var f = a.from.numbers[e],
			    l = D[a.easing](c, a.elasticity),
			    f = a.path ? ca(a, l) : f + l * (b - f);return f = a.round ? Math.round(f * a.round) / a.round : f;
		});return V(e, a.to.strings, a.from.strings);
	},
	    P = function P(a, b) {
		var c;a.currentTime = b;a.progress = b / a.duration * 100;for (var e = 0; e < a.tweens.length; e++) {
			var d = a.tweens[e];d.currentValue = da(d, b);for (var f = d.currentValue, m = 0; m < d.animatables.length; m++) {
				var l = d.animatables[m],
				    k = l.id,
				    l = l.target,
				    h = d.name;switch (d.type) {case "css":
						l.style[h] = f;break;case "attribute":
						l.setAttribute(h, f);break;case "object":
						l[h] = f;break;case "transform":
						c || (c = {}), c[k] || (c[k] = []), c[k].push(f);}
			}
		}if (c) for (e in y || (y = (w(document.body, "transform") ? "" : "-webkit-") + "transform"), c) {
			a.animatables[e].target.style[y] = c[e].join(" ");
		}a.settings.update && a.settings.update(a);
	},
	    Q = function Q(a) {
		var b = {};b.animatables = W(a.targets);b.settings = v(a, u);var c = b.settings,
		    e = [],
		    d;for (d in a) {
			if (!u.hasOwnProperty(d) && "targets" !== d) {
				var g = f.obj(a[d]) ? B(a[d]) : { value: a[d] };g.name = d;e.push(v(g, c));
			}
		}b.properties = e;b.tweens = Y(b.animatables, b.properties);b.duration = Z(b.tweens) || a.duration;b.currentTime = 0;b.progress = 0;b.ended = !1;return b;
	},
	    n = [],
	    x = 0,
	    ea = function () {
		var a = function a() {
			x = requestAnimationFrame(b);
		},
		    b = function b(_b) {
			if (n.length) {
				for (var e = 0; e < n.length; e++) {
					n[e].tick(_b);
				}a();
			} else cancelAnimationFrame(x), x = 0;
		};return a;
	}(),
	    k = function k(a) {
		var b = Q(a),
		    c = {};b.tick = function (a) {
			b.ended = !1;c.start || (c.start = a);c.current = Math.min(Math.max(c.last + a - c.start, 0), b.duration);P(b, c.current);var d = b.settings;d.begin && c.current >= d.delay && (d.begin(b), d.begin = void 0);c.current >= b.duration && (d.loop ? (c.start = a, "alternate" === d.direction && C(b, !0), f.num(d.loop) && d.loop--) : (b.ended = !0, b.pause(), d.complete && d.complete(b)), c.last = 0);
		};b.seek = function (a) {
			P(b, a / 100 * b.duration);
		};b.pause = function () {
			ba(b);var a = n.indexOf(b);-1 < a && n.splice(a, 1);
		};b.play = function (a) {
			b.pause();a && (b = v(Q(v(a, b.settings)), b));c.start = 0;c.last = b.ended ? 0 : b.currentTime;a = b.settings;"reverse" === a.direction && C(b);"alternate" !== a.direction || a.loop || (a.loop = 1);aa(b);n.push(b);x || ea();
		};b.restart = function () {
			b.reversed && C(b);b.pause();b.seek(0);b.play();
		};b.settings.autoplay && b.play();return b;
	};k.version = "1.1.1";k.speed = 1;k.list = n;k.remove = function (a) {
		a = A(f.arr(a) ? a.map(t) : t(a));for (var b = n.length - 1; 0 <= b; b--) {
			for (var c = n[b], e = c.tweens, d = e.length - 1; 0 <= d; d--) {
				for (var g = e[d].animatables, k = g.length - 1; 0 <= k; k--) {
					G(a, g[k].target) && (g.splice(k, 1), g.length || e.splice(d, 1), e.length || c.pause());
				}
			}
		}
	};k.easings = D;
	k.getValue = K;k.path = function (a) {
		a = f.str(a) ? F(a)[0] : a;return { path: a, value: a.getTotalLength() };
	};k.random = function (a, b) {
		return Math.floor(Math.random() * (b - a + 1)) + a;
	};return k;
});
//# sourceMappingURL=data:application/json;base64,

"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
!function (a, b, c, d) {
  "use strict";
  function e(a, b, c) {
    return setTimeout(j(a, c), b);
  }function f(a, b, c) {
    return Array.isArray(a) ? (g(a, c[b], c), !0) : !1;
  }function g(a, b, c) {
    var e;if (a) if (a.forEach) a.forEach(b, c);else if (a.length !== d) for (e = 0; e < a.length;) {
      b.call(c, a[e], e, a), e++;
    } else for (e in a) {
      a.hasOwnProperty(e) && b.call(c, a[e], e, a);
    }
  }function h(b, c, d) {
    var e = "DEPRECATED METHOD: " + c + "\n" + d + " AT \n";return function () {
      var c = new Error("get-stack-trace"),
          d = c && c.stack ? c.stack.replace(/^[^\(]+?[\n$]/gm, "").replace(/^\s+at\s+/gm, "").replace(/^Object.<anonymous>\s*\(/gm, "{anonymous}()@") : "Unknown Stack Trace",
          f = a.console && (a.console.warn || a.console.log);return f && f.call(a.console, e, d), b.apply(this, arguments);
    };
  }function i(a, b, c) {
    var d,
        e = b.prototype;d = a.prototype = Object.create(e), d.constructor = a, d._super = e, c && la(d, c);
  }function j(a, b) {
    return function () {
      return a.apply(b, arguments);
    };
  }function k(a, b) {
    return (typeof a === "undefined" ? "undefined" : _typeof(a)) == oa ? a.apply(b ? b[0] || d : d, b) : a;
  }function l(a, b) {
    return a === d ? b : a;
  }function m(a, b, c) {
    g(q(b), function (b) {
      a.addEventListener(b, c, !1);
    });
  }function n(a, b, c) {
    g(q(b), function (b) {
      a.removeEventListener(b, c, !1);
    });
  }function o(a, b) {
    for (; a;) {
      if (a == b) return !0;a = a.parentNode;
    }return !1;
  }function p(a, b) {
    return a.indexOf(b) > -1;
  }function q(a) {
    return a.trim().split(/\s+/g);
  }function r(a, b, c) {
    if (a.indexOf && !c) return a.indexOf(b);for (var d = 0; d < a.length;) {
      if (c && a[d][c] == b || !c && a[d] === b) return d;d++;
    }return -1;
  }function s(a) {
    return Array.prototype.slice.call(a, 0);
  }function t(a, b, c) {
    for (var d = [], e = [], f = 0; f < a.length;) {
      var g = b ? a[f][b] : a[f];r(e, g) < 0 && d.push(a[f]), e[f] = g, f++;
    }return c && (d = b ? d.sort(function (a, c) {
      return a[b] > c[b];
    }) : d.sort()), d;
  }function u(a, b) {
    for (var c, e, f = b[0].toUpperCase() + b.slice(1), g = 0; g < ma.length;) {
      if (c = ma[g], e = c ? c + f : b, e in a) return e;g++;
    }return d;
  }function v() {
    return ua++;
  }function w(b) {
    var c = b.ownerDocument || b;return c.defaultView || c.parentWindow || a;
  }function x(a, b) {
    var c = this;this.manager = a, this.callback = b, this.element = a.element, this.target = a.options.inputTarget, this.domHandler = function (b) {
      k(a.options.enable, [a]) && c.handler(b);
    }, this.init();
  }function y(a) {
    var b,
        c = a.options.inputClass;return new (b = c ? c : xa ? M : ya ? P : wa ? R : L)(a, z);
  }function z(a, b, c) {
    var d = c.pointers.length,
        e = c.changedPointers.length,
        f = b & Ea && d - e === 0,
        g = b & (Ga | Ha) && d - e === 0;c.isFirst = !!f, c.isFinal = !!g, f && (a.session = {}), c.eventType = b, A(a, c), a.emit("hammer.input", c), a.recognize(c), a.session.prevInput = c;
  }function A(a, b) {
    var c = a.session,
        d = b.pointers,
        e = d.length;c.firstInput || (c.firstInput = D(b)), e > 1 && !c.firstMultiple ? c.firstMultiple = D(b) : 1 === e && (c.firstMultiple = !1);var f = c.firstInput,
        g = c.firstMultiple,
        h = g ? g.center : f.center,
        i = b.center = E(d);b.timeStamp = ra(), b.deltaTime = b.timeStamp - f.timeStamp, b.angle = I(h, i), b.distance = H(h, i), B(c, b), b.offsetDirection = G(b.deltaX, b.deltaY);var j = F(b.deltaTime, b.deltaX, b.deltaY);b.overallVelocityX = j.x, b.overallVelocityY = j.y, b.overallVelocity = qa(j.x) > qa(j.y) ? j.x : j.y, b.scale = g ? K(g.pointers, d) : 1, b.rotation = g ? J(g.pointers, d) : 0, b.maxPointers = c.prevInput ? b.pointers.length > c.prevInput.maxPointers ? b.pointers.length : c.prevInput.maxPointers : b.pointers.length, C(c, b);var k = a.element;o(b.srcEvent.target, k) && (k = b.srcEvent.target), b.target = k;
  }function B(a, b) {
    var c = b.center,
        d = a.offsetDelta || {},
        e = a.prevDelta || {},
        f = a.prevInput || {};b.eventType !== Ea && f.eventType !== Ga || (e = a.prevDelta = { x: f.deltaX || 0, y: f.deltaY || 0 }, d = a.offsetDelta = { x: c.x, y: c.y }), b.deltaX = e.x + (c.x - d.x), b.deltaY = e.y + (c.y - d.y);
  }function C(a, b) {
    var c,
        e,
        f,
        g,
        h = a.lastInterval || b,
        i = b.timeStamp - h.timeStamp;if (b.eventType != Ha && (i > Da || h.velocity === d)) {
      var j = b.deltaX - h.deltaX,
          k = b.deltaY - h.deltaY,
          l = F(i, j, k);e = l.x, f = l.y, c = qa(l.x) > qa(l.y) ? l.x : l.y, g = G(j, k), a.lastInterval = b;
    } else c = h.velocity, e = h.velocityX, f = h.velocityY, g = h.direction;b.velocity = c, b.velocityX = e, b.velocityY = f, b.direction = g;
  }function D(a) {
    for (var b = [], c = 0; c < a.pointers.length;) {
      b[c] = { clientX: pa(a.pointers[c].clientX), clientY: pa(a.pointers[c].clientY) }, c++;
    }return { timeStamp: ra(), pointers: b, center: E(b), deltaX: a.deltaX, deltaY: a.deltaY };
  }function E(a) {
    var b = a.length;if (1 === b) return { x: pa(a[0].clientX), y: pa(a[0].clientY) };for (var c = 0, d = 0, e = 0; b > e;) {
      c += a[e].clientX, d += a[e].clientY, e++;
    }return { x: pa(c / b), y: pa(d / b) };
  }function F(a, b, c) {
    return { x: b / a || 0, y: c / a || 0 };
  }function G(a, b) {
    return a === b ? Ia : qa(a) >= qa(b) ? 0 > a ? Ja : Ka : 0 > b ? La : Ma;
  }function H(a, b, c) {
    c || (c = Qa);var d = b[c[0]] - a[c[0]],
        e = b[c[1]] - a[c[1]];return Math.sqrt(d * d + e * e);
  }function I(a, b, c) {
    c || (c = Qa);var d = b[c[0]] - a[c[0]],
        e = b[c[1]] - a[c[1]];return 180 * Math.atan2(e, d) / Math.PI;
  }function J(a, b) {
    return I(b[1], b[0], Ra) + I(a[1], a[0], Ra);
  }function K(a, b) {
    return H(b[0], b[1], Ra) / H(a[0], a[1], Ra);
  }function L() {
    this.evEl = Ta, this.evWin = Ua, this.pressed = !1, x.apply(this, arguments);
  }function M() {
    this.evEl = Xa, this.evWin = Ya, x.apply(this, arguments), this.store = this.manager.session.pointerEvents = [];
  }function N() {
    this.evTarget = $a, this.evWin = _a, this.started = !1, x.apply(this, arguments);
  }function O(a, b) {
    var c = s(a.touches),
        d = s(a.changedTouches);return b & (Ga | Ha) && (c = t(c.concat(d), "identifier", !0)), [c, d];
  }function P() {
    this.evTarget = bb, this.targetIds = {}, x.apply(this, arguments);
  }function Q(a, b) {
    var c = s(a.touches),
        d = this.targetIds;if (b & (Ea | Fa) && 1 === c.length) return d[c[0].identifier] = !0, [c, c];var e,
        f,
        g = s(a.changedTouches),
        h = [],
        i = this.target;if (f = c.filter(function (a) {
      return o(a.target, i);
    }), b === Ea) for (e = 0; e < f.length;) {
      d[f[e].identifier] = !0, e++;
    }for (e = 0; e < g.length;) {
      d[g[e].identifier] && h.push(g[e]), b & (Ga | Ha) && delete d[g[e].identifier], e++;
    }return h.length ? [t(f.concat(h), "identifier", !0), h] : void 0;
  }function R() {
    x.apply(this, arguments);var a = j(this.handler, this);this.touch = new P(this.manager, a), this.mouse = new L(this.manager, a), this.primaryTouch = null, this.lastTouches = [];
  }function S(a, b) {
    a & Ea ? (this.primaryTouch = b.changedPointers[0].identifier, T.call(this, b)) : a & (Ga | Ha) && T.call(this, b);
  }function T(a) {
    var b = a.changedPointers[0];if (b.identifier === this.primaryTouch) {
      var c = { x: b.clientX, y: b.clientY };this.lastTouches.push(c);var d = this.lastTouches,
          e = function e() {
        var a = d.indexOf(c);a > -1 && d.splice(a, 1);
      };setTimeout(e, cb);
    }
  }function U(a) {
    for (var b = a.srcEvent.clientX, c = a.srcEvent.clientY, d = 0; d < this.lastTouches.length; d++) {
      var e = this.lastTouches[d],
          f = Math.abs(b - e.x),
          g = Math.abs(c - e.y);if (db >= f && db >= g) return !0;
    }return !1;
  }function V(a, b) {
    this.manager = a, this.set(b);
  }function W(a) {
    if (p(a, jb)) return jb;var b = p(a, kb),
        c = p(a, lb);return b && c ? jb : b || c ? b ? kb : lb : p(a, ib) ? ib : hb;
  }function X() {
    if (!fb) return !1;var b = {},
        c = a.CSS && a.CSS.supports;return ["auto", "manipulation", "pan-y", "pan-x", "pan-x pan-y", "none"].forEach(function (d) {
      b[d] = c ? a.CSS.supports("touch-action", d) : !0;
    }), b;
  }function Y(a) {
    this.options = la({}, this.defaults, a || {}), this.id = v(), this.manager = null, this.options.enable = l(this.options.enable, !0), this.state = nb, this.simultaneous = {}, this.requireFail = [];
  }function Z(a) {
    return a & sb ? "cancel" : a & qb ? "end" : a & pb ? "move" : a & ob ? "start" : "";
  }function $(a) {
    return a == Ma ? "down" : a == La ? "up" : a == Ja ? "left" : a == Ka ? "right" : "";
  }function _(a, b) {
    var c = b.manager;return c ? c.get(a) : a;
  }function aa() {
    Y.apply(this, arguments);
  }function ba() {
    aa.apply(this, arguments), this.pX = null, this.pY = null;
  }function ca() {
    aa.apply(this, arguments);
  }function da() {
    Y.apply(this, arguments), this._timer = null, this._input = null;
  }function ea() {
    aa.apply(this, arguments);
  }function fa() {
    aa.apply(this, arguments);
  }function ga() {
    Y.apply(this, arguments), this.pTime = !1, this.pCenter = !1, this._timer = null, this._input = null, this.count = 0;
  }function ha(a, b) {
    return b = b || {}, b.recognizers = l(b.recognizers, ha.defaults.preset), new ia(a, b);
  }function ia(a, b) {
    this.options = la({}, ha.defaults, b || {}), this.options.inputTarget = this.options.inputTarget || a, this.handlers = {}, this.session = {}, this.recognizers = [], this.oldCssProps = {}, this.element = a, this.input = y(this), this.touchAction = new V(this, this.options.touchAction), ja(this, !0), g(this.options.recognizers, function (a) {
      var b = this.add(new a[0](a[1]));a[2] && b.recognizeWith(a[2]), a[3] && b.requireFailure(a[3]);
    }, this);
  }function ja(a, b) {
    var c = a.element;if (c.style) {
      var d;g(a.options.cssProps, function (e, f) {
        d = u(c.style, f), b ? (a.oldCssProps[d] = c.style[d], c.style[d] = e) : c.style[d] = a.oldCssProps[d] || "";
      }), b || (a.oldCssProps = {});
    }
  }function ka(a, c) {
    var d = b.createEvent("Event");d.initEvent(a, !0, !0), d.gesture = c, c.target.dispatchEvent(d);
  }var la,
      ma = ["", "webkit", "Moz", "MS", "ms", "o"],
      na = b.createElement("div"),
      oa = "function",
      pa = Math.round,
      qa = Math.abs,
      ra = Date.now;la = "function" != typeof Object.assign ? function (a) {
    if (a === d || null === a) throw new TypeError("Cannot convert undefined or null to object");for (var b = Object(a), c = 1; c < arguments.length; c++) {
      var e = arguments[c];if (e !== d && null !== e) for (var f in e) {
        e.hasOwnProperty(f) && (b[f] = e[f]);
      }
    }return b;
  } : Object.assign;var sa = h(function (a, b, c) {
    for (var e = Object.keys(b), f = 0; f < e.length;) {
      (!c || c && a[e[f]] === d) && (a[e[f]] = b[e[f]]), f++;
    }return a;
  }, "extend", "Use `assign`."),
      ta = h(function (a, b) {
    return sa(a, b, !0);
  }, "merge", "Use `assign`."),
      ua = 1,
      va = /mobile|tablet|ip(ad|hone|od)|android/i,
      wa = "ontouchstart" in a,
      xa = u(a, "PointerEvent") !== d,
      ya = wa && va.test(navigator.userAgent),
      za = "touch",
      Aa = "pen",
      Ba = "mouse",
      Ca = "kinect",
      Da = 25,
      Ea = 1,
      Fa = 2,
      Ga = 4,
      Ha = 8,
      Ia = 1,
      Ja = 2,
      Ka = 4,
      La = 8,
      Ma = 16,
      Na = Ja | Ka,
      Oa = La | Ma,
      Pa = Na | Oa,
      Qa = ["x", "y"],
      Ra = ["clientX", "clientY"];x.prototype = { handler: function handler() {}, init: function init() {
      this.evEl && m(this.element, this.evEl, this.domHandler), this.evTarget && m(this.target, this.evTarget, this.domHandler), this.evWin && m(w(this.element), this.evWin, this.domHandler);
    }, destroy: function destroy() {
      this.evEl && n(this.element, this.evEl, this.domHandler), this.evTarget && n(this.target, this.evTarget, this.domHandler), this.evWin && n(w(this.element), this.evWin, this.domHandler);
    } };var Sa = { mousedown: Ea, mousemove: Fa, mouseup: Ga },
      Ta = "mousedown",
      Ua = "mousemove mouseup";i(L, x, { handler: function handler(a) {
      var b = Sa[a.type];b & Ea && 0 === a.button && (this.pressed = !0), b & Fa && 1 !== a.which && (b = Ga), this.pressed && (b & Ga && (this.pressed = !1), this.callback(this.manager, b, { pointers: [a], changedPointers: [a], pointerType: Ba, srcEvent: a }));
    } });var Va = { pointerdown: Ea, pointermove: Fa, pointerup: Ga, pointercancel: Ha, pointerout: Ha },
      Wa = { 2: za, 3: Aa, 4: Ba, 5: Ca },
      Xa = "pointerdown",
      Ya = "pointermove pointerup pointercancel";a.MSPointerEvent && !a.PointerEvent && (Xa = "MSPointerDown", Ya = "MSPointerMove MSPointerUp MSPointerCancel"), i(M, x, { handler: function handler(a) {
      var b = this.store,
          c = !1,
          d = a.type.toLowerCase().replace("ms", ""),
          e = Va[d],
          f = Wa[a.pointerType] || a.pointerType,
          g = f == za,
          h = r(b, a.pointerId, "pointerId");e & Ea && (0 === a.button || g) ? 0 > h && (b.push(a), h = b.length - 1) : e & (Ga | Ha) && (c = !0), 0 > h || (b[h] = a, this.callback(this.manager, e, { pointers: b, changedPointers: [a], pointerType: f, srcEvent: a }), c && b.splice(h, 1));
    } });var Za = { touchstart: Ea, touchmove: Fa, touchend: Ga, touchcancel: Ha },
      $a = "touchstart",
      _a = "touchstart touchmove touchend touchcancel";i(N, x, { handler: function handler(a) {
      var b = Za[a.type];if (b === Ea && (this.started = !0), this.started) {
        var c = O.call(this, a, b);b & (Ga | Ha) && c[0].length - c[1].length === 0 && (this.started = !1), this.callback(this.manager, b, { pointers: c[0], changedPointers: c[1], pointerType: za, srcEvent: a });
      }
    } });var ab = { touchstart: Ea, touchmove: Fa, touchend: Ga, touchcancel: Ha },
      bb = "touchstart touchmove touchend touchcancel";i(P, x, { handler: function handler(a) {
      var b = ab[a.type],
          c = Q.call(this, a, b);c && this.callback(this.manager, b, { pointers: c[0], changedPointers: c[1], pointerType: za, srcEvent: a });
    } });var cb = 2500,
      db = 25;i(R, x, { handler: function handler(a, b, c) {
      var d = c.pointerType == za,
          e = c.pointerType == Ba;if (!(e && c.sourceCapabilities && c.sourceCapabilities.firesTouchEvents)) {
        if (d) S.call(this, b, c);else if (e && U.call(this, c)) return;this.callback(a, b, c);
      }
    }, destroy: function destroy() {
      this.touch.destroy(), this.mouse.destroy();
    } });var eb = u(na.style, "touchAction"),
      fb = eb !== d,
      gb = "compute",
      hb = "auto",
      ib = "manipulation",
      jb = "none",
      kb = "pan-x",
      lb = "pan-y",
      mb = X();V.prototype = { set: function set(a) {
      a == gb && (a = this.compute()), fb && this.manager.element.style && mb[a] && (this.manager.element.style[eb] = a), this.actions = a.toLowerCase().trim();
    }, update: function update() {
      this.set(this.manager.options.touchAction);
    }, compute: function compute() {
      var a = [];return g(this.manager.recognizers, function (b) {
        k(b.options.enable, [b]) && (a = a.concat(b.getTouchAction()));
      }), W(a.join(" "));
    }, preventDefaults: function preventDefaults(a) {
      var b = a.srcEvent,
          c = a.offsetDirection;if (this.manager.session.prevented) return void b.preventDefault();var d = this.actions,
          e = p(d, jb) && !mb[jb],
          f = p(d, lb) && !mb[lb],
          g = p(d, kb) && !mb[kb];if (e) {
        var h = 1 === a.pointers.length,
            i = a.distance < 2,
            j = a.deltaTime < 250;if (h && i && j) return;
      }return g && f ? void 0 : e || f && c & Na || g && c & Oa ? this.preventSrc(b) : void 0;
    }, preventSrc: function preventSrc(a) {
      this.manager.session.prevented = !0, a.preventDefault();
    } };var nb = 1,
      ob = 2,
      pb = 4,
      qb = 8,
      rb = qb,
      sb = 16,
      tb = 32;Y.prototype = { defaults: {}, set: function set(a) {
      return la(this.options, a), this.manager && this.manager.touchAction.update(), this;
    }, recognizeWith: function recognizeWith(a) {
      if (f(a, "recognizeWith", this)) return this;var b = this.simultaneous;return a = _(a, this), b[a.id] || (b[a.id] = a, a.recognizeWith(this)), this;
    }, dropRecognizeWith: function dropRecognizeWith(a) {
      return f(a, "dropRecognizeWith", this) ? this : (a = _(a, this), delete this.simultaneous[a.id], this);
    }, requireFailure: function requireFailure(a) {
      if (f(a, "requireFailure", this)) return this;var b = this.requireFail;return a = _(a, this), -1 === r(b, a) && (b.push(a), a.requireFailure(this)), this;
    }, dropRequireFailure: function dropRequireFailure(a) {
      if (f(a, "dropRequireFailure", this)) return this;a = _(a, this);var b = r(this.requireFail, a);return b > -1 && this.requireFail.splice(b, 1), this;
    }, hasRequireFailures: function hasRequireFailures() {
      return this.requireFail.length > 0;
    }, canRecognizeWith: function canRecognizeWith(a) {
      return !!this.simultaneous[a.id];
    }, emit: function emit(a) {
      function b(b) {
        c.manager.emit(b, a);
      }var c = this,
          d = this.state;qb > d && b(c.options.event + Z(d)), b(c.options.event), a.additionalEvent && b(a.additionalEvent), d >= qb && b(c.options.event + Z(d));
    }, tryEmit: function tryEmit(a) {
      return this.canEmit() ? this.emit(a) : void (this.state = tb);
    }, canEmit: function canEmit() {
      for (var a = 0; a < this.requireFail.length;) {
        if (!(this.requireFail[a].state & (tb | nb))) return !1;a++;
      }return !0;
    }, recognize: function recognize(a) {
      var b = la({}, a);return k(this.options.enable, [this, b]) ? (this.state & (rb | sb | tb) && (this.state = nb), this.state = this.process(b), void (this.state & (ob | pb | qb | sb) && this.tryEmit(b))) : (this.reset(), void (this.state = tb));
    }, process: function process(a) {}, getTouchAction: function getTouchAction() {}, reset: function reset() {} }, i(aa, Y, { defaults: { pointers: 1 }, attrTest: function attrTest(a) {
      var b = this.options.pointers;return 0 === b || a.pointers.length === b;
    }, process: function process(a) {
      var b = this.state,
          c = a.eventType,
          d = b & (ob | pb),
          e = this.attrTest(a);return d && (c & Ha || !e) ? b | sb : d || e ? c & Ga ? b | qb : b & ob ? b | pb : ob : tb;
    } }), i(ba, aa, { defaults: { event: "pan", threshold: 10, pointers: 1, direction: Pa }, getTouchAction: function getTouchAction() {
      var a = this.options.direction,
          b = [];return a & Na && b.push(lb), a & Oa && b.push(kb), b;
    }, directionTest: function directionTest(a) {
      var b = this.options,
          c = !0,
          d = a.distance,
          e = a.direction,
          f = a.deltaX,
          g = a.deltaY;return e & b.direction || (b.direction & Na ? (e = 0 === f ? Ia : 0 > f ? Ja : Ka, c = f != this.pX, d = Math.abs(a.deltaX)) : (e = 0 === g ? Ia : 0 > g ? La : Ma, c = g != this.pY, d = Math.abs(a.deltaY))), a.direction = e, c && d > b.threshold && e & b.direction;
    }, attrTest: function attrTest(a) {
      return aa.prototype.attrTest.call(this, a) && (this.state & ob || !(this.state & ob) && this.directionTest(a));
    }, emit: function emit(a) {
      this.pX = a.deltaX, this.pY = a.deltaY;var b = $(a.direction);b && (a.additionalEvent = this.options.event + b), this._super.emit.call(this, a);
    } }), i(ca, aa, { defaults: { event: "pinch", threshold: 0, pointers: 2 }, getTouchAction: function getTouchAction() {
      return [jb];
    }, attrTest: function attrTest(a) {
      return this._super.attrTest.call(this, a) && (Math.abs(a.scale - 1) > this.options.threshold || this.state & ob);
    }, emit: function emit(a) {
      if (1 !== a.scale) {
        var b = a.scale < 1 ? "in" : "out";a.additionalEvent = this.options.event + b;
      }this._super.emit.call(this, a);
    } }), i(da, Y, { defaults: { event: "press", pointers: 1, time: 251, threshold: 9 }, getTouchAction: function getTouchAction() {
      return [hb];
    }, process: function process(a) {
      var b = this.options,
          c = a.pointers.length === b.pointers,
          d = a.distance < b.threshold,
          f = a.deltaTime > b.time;if (this._input = a, !d || !c || a.eventType & (Ga | Ha) && !f) this.reset();else if (a.eventType & Ea) this.reset(), this._timer = e(function () {
        this.state = rb, this.tryEmit();
      }, b.time, this);else if (a.eventType & Ga) return rb;return tb;
    }, reset: function reset() {
      clearTimeout(this._timer);
    }, emit: function emit(a) {
      this.state === rb && (a && a.eventType & Ga ? this.manager.emit(this.options.event + "up", a) : (this._input.timeStamp = ra(), this.manager.emit(this.options.event, this._input)));
    } }), i(ea, aa, { defaults: { event: "rotate", threshold: 0, pointers: 2 }, getTouchAction: function getTouchAction() {
      return [jb];
    }, attrTest: function attrTest(a) {
      return this._super.attrTest.call(this, a) && (Math.abs(a.rotation) > this.options.threshold || this.state & ob);
    } }), i(fa, aa, { defaults: { event: "swipe", threshold: 10, velocity: .3, direction: Na | Oa, pointers: 1 }, getTouchAction: function getTouchAction() {
      return ba.prototype.getTouchAction.call(this);
    }, attrTest: function attrTest(a) {
      var b,
          c = this.options.direction;return c & (Na | Oa) ? b = a.overallVelocity : c & Na ? b = a.overallVelocityX : c & Oa && (b = a.overallVelocityY), this._super.attrTest.call(this, a) && c & a.offsetDirection && a.distance > this.options.threshold && a.maxPointers == this.options.pointers && qa(b) > this.options.velocity && a.eventType & Ga;
    }, emit: function emit(a) {
      var b = $(a.offsetDirection);b && this.manager.emit(this.options.event + b, a), this.manager.emit(this.options.event, a);
    } }), i(ga, Y, { defaults: { event: "tap", pointers: 1, taps: 1, interval: 300, time: 250, threshold: 9, posThreshold: 10 }, getTouchAction: function getTouchAction() {
      return [ib];
    }, process: function process(a) {
      var b = this.options,
          c = a.pointers.length === b.pointers,
          d = a.distance < b.threshold,
          f = a.deltaTime < b.time;if (this.reset(), a.eventType & Ea && 0 === this.count) return this.failTimeout();if (d && f && c) {
        if (a.eventType != Ga) return this.failTimeout();var g = this.pTime ? a.timeStamp - this.pTime < b.interval : !0,
            h = !this.pCenter || H(this.pCenter, a.center) < b.posThreshold;this.pTime = a.timeStamp, this.pCenter = a.center, h && g ? this.count += 1 : this.count = 1, this._input = a;var i = this.count % b.taps;if (0 === i) return this.hasRequireFailures() ? (this._timer = e(function () {
          this.state = rb, this.tryEmit();
        }, b.interval, this), ob) : rb;
      }return tb;
    }, failTimeout: function failTimeout() {
      return this._timer = e(function () {
        this.state = tb;
      }, this.options.interval, this), tb;
    }, reset: function reset() {
      clearTimeout(this._timer);
    }, emit: function emit() {
      this.state == rb && (this._input.tapCount = this.count, this.manager.emit(this.options.event, this._input));
    } }), ha.VERSION = "2.0.7", ha.defaults = { domEvents: !1, touchAction: gb, enable: !0, inputTarget: null, inputClass: null, preset: [[ea, { enable: !1 }], [ca, { enable: !1 }, ["rotate"]], [fa, { direction: Na }], [ba, { direction: Na }, ["swipe"]], [ga], [ga, { event: "doubletap", taps: 2 }, ["tap"]], [da]], cssProps: { userSelect: "none", touchSelect: "none", touchCallout: "none", contentZooming: "none", userDrag: "none", tapHighlightColor: "rgba(0,0,0,0)" } };var ub = 1,
      vb = 2;ia.prototype = { set: function set(a) {
      return la(this.options, a), a.touchAction && this.touchAction.update(), a.inputTarget && (this.input.destroy(), this.input.target = a.inputTarget, this.input.init()), this;
    }, stop: function stop(a) {
      this.session.stopped = a ? vb : ub;
    }, recognize: function recognize(a) {
      var b = this.session;if (!b.stopped) {
        this.touchAction.preventDefaults(a);var c,
            d = this.recognizers,
            e = b.curRecognizer;(!e || e && e.state & rb) && (e = b.curRecognizer = null);for (var f = 0; f < d.length;) {
          c = d[f], b.stopped === vb || e && c != e && !c.canRecognizeWith(e) ? c.reset() : c.recognize(a), !e && c.state & (ob | pb | qb) && (e = b.curRecognizer = c), f++;
        }
      }
    }, get: function get(a) {
      if (a instanceof Y) return a;for (var b = this.recognizers, c = 0; c < b.length; c++) {
        if (b[c].options.event == a) return b[c];
      }return null;
    }, add: function add(a) {
      if (f(a, "add", this)) return this;var b = this.get(a.options.event);return b && this.remove(b), this.recognizers.push(a), a.manager = this, this.touchAction.update(), a;
    }, remove: function remove(a) {
      if (f(a, "remove", this)) return this;if (a = this.get(a)) {
        var b = this.recognizers,
            c = r(b, a);-1 !== c && (b.splice(c, 1), this.touchAction.update());
      }return this;
    }, on: function on(a, b) {
      if (a !== d && b !== d) {
        var c = this.handlers;return g(q(a), function (a) {
          c[a] = c[a] || [], c[a].push(b);
        }), this;
      }
    }, off: function off(a, b) {
      if (a !== d) {
        var c = this.handlers;return g(q(a), function (a) {
          b ? c[a] && c[a].splice(r(c[a], b), 1) : delete c[a];
        }), this;
      }
    }, emit: function emit(a, b) {
      this.options.domEvents && ka(a, b);var c = this.handlers[a] && this.handlers[a].slice();if (c && c.length) {
        b.type = a, b.preventDefault = function () {
          b.srcEvent.preventDefault();
        };for (var d = 0; d < c.length;) {
          c[d](b), d++;
        }
      }
    }, destroy: function destroy() {
      this.element && ja(this, !1), this.handlers = {}, this.session = {}, this.input.destroy(), this.element = null;
    } }, la(ha, { INPUT_START: Ea, INPUT_MOVE: Fa, INPUT_END: Ga, INPUT_CANCEL: Ha, STATE_POSSIBLE: nb, STATE_BEGAN: ob, STATE_CHANGED: pb, STATE_ENDED: qb, STATE_RECOGNIZED: rb, STATE_CANCELLED: sb, STATE_FAILED: tb, DIRECTION_NONE: Ia, DIRECTION_LEFT: Ja, DIRECTION_RIGHT: Ka, DIRECTION_UP: La, DIRECTION_DOWN: Ma, DIRECTION_HORIZONTAL: Na, DIRECTION_VERTICAL: Oa, DIRECTION_ALL: Pa, Manager: ia, Input: x, TouchAction: V, TouchInput: P, MouseInput: L, PointerEventInput: M, TouchMouseInput: R, SingleTouchInput: N, Recognizer: Y, AttrRecognizer: aa, Tap: ga, Pan: ba, Swipe: fa, Pinch: ca, Rotate: ea, Press: da, on: m, off: n, each: g, merge: ta, extend: sa, assign: la, inherit: i, bindFn: j, prefixed: u });var wb = "undefined" != typeof a ? a : "undefined" != typeof self ? self : {};wb.Hammer = ha, "function" == typeof define && define.amd ? define(function () {
    return ha;
  }) : "undefined" != typeof module && module.exports ? module.exports = ha : a[c] = ha;
}(window, document, "Hammer");
//# sourceMappingURL=hammer.min.js.map
//# sourceMappingURL=data:application/json;base64,

"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/*! modernizr 3.3.1 (Custom Build) | MIT *
 * https://modernizr.com/download/?-csstransforms-csstransforms3d-preserve3d-setclasses !*/
!function (e, n, t) {
    function r(e, n) {
        return (typeof e === "undefined" ? "undefined" : _typeof(e)) === n;
    }function s() {
        var e, n, t, s, o, i, a;for (var f in C) {
            if (C.hasOwnProperty(f)) {
                if (e = [], n = C[f], n.name && (e.push(n.name.toLowerCase()), n.options && n.options.aliases && n.options.aliases.length)) for (t = 0; t < n.options.aliases.length; t++) {
                    e.push(n.options.aliases[t].toLowerCase());
                }for (s = r(n.fn, "function") ? n.fn() : n.fn, o = 0; o < e.length; o++) {
                    i = e[o], a = i.split("."), 1 === a.length ? Modernizr[a[0]] = s : (!Modernizr[a[0]] || Modernizr[a[0]] instanceof Boolean || (Modernizr[a[0]] = new Boolean(Modernizr[a[0]])), Modernizr[a[0]][a[1]] = s), y.push((s ? "" : "no-") + a.join("-"));
                }
            }
        }
    }function o(e) {
        var n = x.className,
            t = Modernizr._config.classPrefix || "";if (S && (n = n.baseVal), Modernizr._config.enableJSClass) {
            var r = new RegExp("(^|\\s)" + t + "no-js(\\s|$)");n = n.replace(r, "$1" + t + "js$2");
        }Modernizr._config.enableClasses && (n += " " + t + e.join(" " + t), S ? x.className.baseVal = n : x.className = n);
    }function i() {
        return "function" != typeof n.createElement ? n.createElement(arguments[0]) : S ? n.createElementNS.call(n, "http://www.w3.org/2000/svg", arguments[0]) : n.createElement.apply(n, arguments);
    }function a() {
        var e = n.body;return e || (e = i(S ? "svg" : "body"), e.fake = !0), e;
    }function f(e, t, r, s) {
        var o,
            f,
            l,
            d,
            u = "modernizr",
            p = i("div"),
            c = a();if (parseInt(r, 10)) for (; r--;) {
            l = i("div"), l.id = s ? s[r] : u + (r + 1), p.appendChild(l);
        }return o = i("style"), o.type = "text/css", o.id = "s" + u, (c.fake ? c : p).appendChild(o), c.appendChild(p), o.styleSheet ? o.styleSheet.cssText = e : o.appendChild(n.createTextNode(e)), p.id = u, c.fake && (c.style.background = "", c.style.overflow = "hidden", d = x.style.overflow, x.style.overflow = "hidden", x.appendChild(c)), f = t(p, e), c.fake ? (c.parentNode.removeChild(c), x.style.overflow = d, x.offsetHeight) : p.parentNode.removeChild(p), !!f;
    }function l(e, n) {
        return !!~("" + e).indexOf(n);
    }function d(e) {
        return e.replace(/([a-z])-([a-z])/g, function (e, n, t) {
            return n + t.toUpperCase();
        }).replace(/^-/, "");
    }function u(e, n) {
        return function () {
            return e.apply(n, arguments);
        };
    }function p(e, n, t) {
        var s;for (var o in e) {
            if (e[o] in n) return t === !1 ? e[o] : (s = n[e[o]], r(s, "function") ? u(s, t || n) : s);
        }return !1;
    }function c(e) {
        return e.replace(/([A-Z])/g, function (e, n) {
            return "-" + n.toLowerCase();
        }).replace(/^ms-/, "-ms-");
    }function m(n, r) {
        var s = n.length;if ("CSS" in e && "supports" in e.CSS) {
            for (; s--;) {
                if (e.CSS.supports(c(n[s]), r)) return !0;
            }return !1;
        }if ("CSSSupportsRule" in e) {
            for (var o = []; s--;) {
                o.push("(" + c(n[s]) + ":" + r + ")");
            }return o = o.join(" or "), f("@supports (" + o + ") { #modernizr { position: absolute; } }", function (e) {
                return "absolute" == getComputedStyle(e, null).position;
            });
        }return t;
    }function h(e, n, s, o) {
        function a() {
            u && (delete N.style, delete N.modElem);
        }if (o = r(o, "undefined") ? !1 : o, !r(s, "undefined")) {
            var f = m(e, s);if (!r(f, "undefined")) return f;
        }for (var u, p, c, h, g, v = ["modernizr", "tspan", "samp"]; !N.style && v.length;) {
            u = !0, N.modElem = i(v.shift()), N.style = N.modElem.style;
        }for (c = e.length, p = 0; c > p; p++) {
            if (h = e[p], g = N.style[h], l(h, "-") && (h = d(h)), N.style[h] !== t) {
                if (o || r(s, "undefined")) return a(), "pfx" == n ? h : !0;try {
                    N.style[h] = s;
                } catch (y) {}if (N.style[h] != g) return a(), "pfx" == n ? h : !0;
            }
        }return a(), !1;
    }function g(e, n, t, s, o) {
        var i = e.charAt(0).toUpperCase() + e.slice(1),
            a = (e + " " + k.join(i + " ") + i).split(" ");return r(n, "string") || r(n, "undefined") ? h(a, n, s, o) : (a = (e + " " + z.join(i + " ") + i).split(" "), p(a, n, t));
    }function v(e, n, r) {
        return g(e, t, t, n, r);
    }var y = [],
        C = [],
        w = { _version: "3.3.1", _config: { classPrefix: "", enableClasses: !0, enableJSClass: !0, usePrefixes: !0 }, _q: [], on: function on(e, n) {
            var t = this;setTimeout(function () {
                n(t[e]);
            }, 0);
        }, addTest: function addTest(e, n, t) {
            C.push({ name: e, fn: n, options: t });
        }, addAsyncTest: function addAsyncTest(e) {
            C.push({ name: null, fn: e });
        } },
        Modernizr = function Modernizr() {};Modernizr.prototype = w, Modernizr = new Modernizr();var x = n.documentElement,
        S = "svg" === x.nodeName.toLowerCase(),
        _ = "CSS" in e && "supports" in e.CSS,
        b = "supportsCSS" in e;Modernizr.addTest("supports", _ || b), Modernizr.addTest("preserve3d", function () {
        var e = i("a"),
            n = i("a");e.style.cssText = "display: block; transform-style: preserve-3d; transform-origin: right; transform: rotateY(40deg);", n.style.cssText = "display: block; width: 9px; height: 1px; background: #000; transform-origin: right; transform: rotateY(40deg);", e.appendChild(n), x.appendChild(e);var t = n.getBoundingClientRect();return x.removeChild(e), t.width && t.width < 4;
    });var T = w.testStyles = f,
        P = "Moz O ms Webkit",
        k = w._config.usePrefixes ? P.split(" ") : [];w._cssomPrefixes = k;var z = w._config.usePrefixes ? P.toLowerCase().split(" ") : [];w._domPrefixes = z;var E = { elem: i("modernizr") };Modernizr._q.push(function () {
        delete E.elem;
    });var N = { style: E.elem.style };Modernizr._q.unshift(function () {
        delete N.style;
    }), w.testAllProps = g, w.testAllProps = v, Modernizr.addTest("csstransforms3d", function () {
        var e = !!v("perspective", "1px", !0),
            n = Modernizr._config.usePrefixes;if (e && (!n || "webkitPerspective" in x.style)) {
            var t,
                r = "#modernizr{width:0;height:0}";Modernizr.supports ? t = "@supports (perspective: 1px)" : (t = "@media (transform-3d)", n && (t += ",(-webkit-transform-3d)")), t += "{#modernizr{width:7px;height:18px;margin:0;padding:0;border:0}}", T(r + t, function (n) {
                e = 7 === n.offsetWidth && 18 === n.offsetHeight;
            });
        }return e;
    }), Modernizr.addTest("csstransforms", function () {
        return -1 === navigator.userAgent.indexOf("Android 2.") && v("transform", "scale(1)", !0);
    }), s(), o(y), delete w.addTest, delete w.addAsyncTest;for (var A = 0; A < Modernizr._q.length; A++) {
        Modernizr._q[A]();
    }e.Modernizr = Modernizr;
}(window, document);
(function () {
    var lastTime = 0;
    var vendors = ['ms', 'moz', 'webkit', 'o'];
    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
    }

    if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback, element) {
        var currTime = new Date().getTime();
        var timeToCall = Math.max(0, 16 - (currTime - lastTime));
        var id = window.setTimeout(function () {
            callback(currTime + timeToCall);
        }, timeToCall);
        lastTime = currTime + timeToCall;
        return id;
    };

    if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {
        clearTimeout(id);
    };
})();
//# sourceMappingURL=data:application/json;base64,

'use strict';

/*!
 *
 *  Web Starter Kit
 *  Copyright 2015 Google Inc. All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License
 *
 */
/* eslint-env browser */
(function () {
  'use strict';

  // Check to make sure service workers are supported in the current browser,
  // and that the current page is accessed from a secure origin. Using a
  // service worker from an insecure origin will trigger JS console errors. See
  // http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features

  var isLocalhost = Boolean(window.location.hostname === 'localhost' ||
  // [::1] is the IPv6 localhost address.
  window.location.hostname === '[::1]' ||
  // 127.0.0.1/8 is considered localhost for IPv4.
  window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));

  var open = false;

  var SwipeQuestionManager = function () {
    function Main(question, handler) {
      var self = this;
      this.container = question;
      this.anim = null;
      this.isSwiping = false;
      this.handler = handler;
      this.defaultPosition = 0;
      this.toggleDelta = -80;
      this.previousPosition = 0;

      this.mc = Hammer(question);
      this.mc.get('pan').set({ direction: Hammer.DIRECTION_HORIZONTAL });
      this.mc.on('panstart panleft panend', function (ev) {
        self.handlePan(ev);
      });
    }

    Main.prototype.handlePan = function (ev) {
      var self = this;
      switch (ev.type) {
        case "panstart":
          self.handlePanStart(ev);
          break;
        case "panend":
          self.handlePanEnd(ev);
          break;
        case "panleft":
          self.handlePanLeft(ev);
          break;
        case "panright":
          self.handlePanRight(ev);
          break;
      }
    };

    Main.prototype.handlePanStart = function (ev) {};
    Main.prototype.handlePanEnd = function (ev) {
      var self = this;
      if (!this.isSwiping) {
        return;
      }
      if (ev.deltaX < 0) {
        this.previousPosition = this.previousPosition - ev.distance;
      } else {
        this.previousPosition = this.previousPosition + ev.distance;
      }

      if (ev.deltaX <= this.toggleDelta) {
        console.log('toggled');
        this.handler.call(this, ev);
      }

      cancelAnimationFrame(this._anim);
      this.resetPositionToDefault();
    };
    Main.prototype.handlePanLeft = function (ev) {
      var self = this;
      this.isSwiping = true;
      if (!this._anim) {
        this.updatePosition();
      }
      this.defaultPosition = this.previousPosition + ev.deltaX * 1;
      ev.preventDefault();
    };
    Main.prototype.handlePanRight = function (ev) {
      var self = this;
      this.isSwiping = true;
      if (!this._anim) {
        this.updatePosition();
      }
      ev.preventDefault();
      this.defaultPosition = this.previousPosition + ev.deltaX * 1;
    };

    Main.prototype.resetPosition = function () {
      var self = this;
      cancelAnimationFrame(this._anim);
      this._anim = null;
      this.isSwiping = false;
    };

    Main.prototype.setPosition = function (position) {
      var self = this;
      this.container.style.transform = 'translate3d(' + position + 'px,0px,0)';
    };

    Main.prototype.resetPositionToDefault = function () {
      var _this = this;

      var self = this;
      if (this.previousPosition <= 10) {
        this.previousPosition = this.previousPosition + 10;
        this.setPosition(this.previousPosition);
        this.anim = requestAnimationFrame(function () {
          _this.resetPositionToDefault();
        });
      } else {
        this.setPosition(0);
        this.resetPosition();
      }
    };
    Main.prototype.updatePosition = function (position) {
      var self = this;
      this.setPosition(self.defaultPosition);
      this._anim = requestAnimationFrame(function () {
        self.updatePosition();
      });
    };

    return Main;
  }();

  var question = document.getElementById('question');
  var swipe = new SwipeQuestionManager(question);

  swipe.handler = function (ev) {
    console.log(ev.target);
    if (!open) {
      window.animation = anime({
        targets: '.help-text-1',
        marginTop: {
          value: [0, 10],
          duration: 300,
          delay: 500,
          easing: 'easeInOutExpo'
        },
        marginBottom: {
          value: [0, 5],
          delay: 500,
          duration: 300,
          easing: 'easeInOutExpo'
        },
        maxHeight: {
          value: ['0%', '100%'],
          duration: 300,
          delay: 500
        },
        opacity: {
          value: [0, 1],
          delay: 500,
          duration: 350,
          easing: 'easeInOutExpo'
        }
      });
      open = true;
    } else {
      var elements = document.getElementsByClassName('help-text');
      for (var i = 0; i < elements.length; i++) {
        console.log(elements[i]);
        elements[i].removeAttribute('style');
      }
      open = false;
    }
  };

  // Your custom JavaScript goes here
})();
//# sourceMappingURL=data:application/json;base64,

//# sourceMappingURL=main.min.js.map
