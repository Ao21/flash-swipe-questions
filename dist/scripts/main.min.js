'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/*
 * Anime v1.1.1
 * http://anime-js.com
 * JavaScript animation engine
 * Copyright (c) 2016 Julian Garnier
 * http://juliangarnier.com
 * Released under the MIT license
 */

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([], factory);
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory();
  } else {
    // Browser globals (root is window)
    window.anime = factory();
  }
})(undefined, function () {

  var version = '1.1.1';

  // Defaults

  var defaultSettings = {
    duration: 1000,
    delay: 0,
    loop: false,
    autoplay: true,
    direction: 'normal',
    easing: 'easeOutElastic',
    elasticity: 400,
    round: false,
    begin: undefined,
    update: undefined,
    complete: undefined
  };

  // Transforms

  var validTransforms = ['translateX', 'translateY', 'translateZ', 'rotate', 'rotateX', 'rotateY', 'rotateZ', 'scale', 'scaleX', 'scaleY', 'scaleZ', 'skewX', 'skewY'];
  var transform,
      transformStr = 'transform';

  // Utils

  var is = {
    arr: function arr(a) {
      return Array.isArray(a);
    },
    obj: function obj(a) {
      return Object.prototype.toString.call(a).indexOf('Object') > -1;
    },
    svg: function svg(a) {
      return a instanceof SVGElement;
    },
    dom: function dom(a) {
      return a.nodeType || is.svg(a);
    },
    num: function num(a) {
      return !isNaN(parseInt(a));
    },
    str: function str(a) {
      return typeof a === 'string';
    },
    fnc: function fnc(a) {
      return typeof a === 'function';
    },
    und: function und(a) {
      return typeof a === 'undefined';
    },
    nul: function nul(a) {
      return typeof a === 'null';
    },
    hex: function hex(a) {
      return (/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a)
      );
    },
    rgb: function rgb(a) {
      return (/^rgb/.test(a)
      );
    },
    hsl: function hsl(a) {
      return (/^hsl/.test(a)
      );
    },
    col: function col(a) {
      return is.hex(a) || is.rgb(a) || is.hsl(a);
    }
  };

  // Easings functions adapted from http://jqueryui.com/

  var easings = function () {
    var eases = {};
    var names = ['Quad', 'Cubic', 'Quart', 'Quint', 'Expo'];
    var functions = {
      Sine: function Sine(t) {
        return 1 - Math.cos(t * Math.PI / 2);
      },
      Circ: function Circ(t) {
        return 1 - Math.sqrt(1 - t * t);
      },
      Elastic: function Elastic(t, m) {
        if (t === 0 || t === 1) return t;
        var p = 1 - Math.min(m, 998) / 1000,
            st = t / 1,
            st1 = st - 1,
            s = p / (2 * Math.PI) * Math.asin(1);
        return -(Math.pow(2, 10 * st1) * Math.sin((st1 - s) * (2 * Math.PI) / p));
      },
      Back: function Back(t) {
        return t * t * (3 * t - 2);
      },
      Bounce: function Bounce(t) {
        var pow2,
            bounce = 4;
        while (t < ((pow2 = Math.pow(2, --bounce)) - 1) / 11) {}
        return 1 / Math.pow(4, 3 - bounce) - 7.5625 * Math.pow((pow2 * 3 - 2) / 22 - t, 2);
      }
    };
    names.forEach(function (name, i) {
      functions[name] = function (t) {
        return Math.pow(t, i + 2);
      };
    });
    Object.keys(functions).forEach(function (name) {
      var easeIn = functions[name];
      eases['easeIn' + name] = easeIn;
      eases['easeOut' + name] = function (t, m) {
        return 1 - easeIn(1 - t, m);
      };
      eases['easeInOut' + name] = function (t, m) {
        return t < 0.5 ? easeIn(t * 2, m) / 2 : 1 - easeIn(t * -2 + 2, m) / 2;
      };
      eases['easeOutIn' + name] = function (t, m) {
        return t < 0.5 ? (1 - easeIn(1 - 2 * t, m)) / 2 : (easeIn(t * 2 - 1, m) + 1) / 2;
      };
    });
    eases.linear = function (t) {
      return t;
    };
    return eases;
  }();

  // Strings

  var numberToString = function numberToString(val) {
    return is.str(val) ? val : val + '';
  };

  var stringToHyphens = function stringToHyphens(str) {
    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
  };

  var selectString = function selectString(str) {
    if (is.col(str)) return false;
    try {
      var nodes = document.querySelectorAll(str);
      return nodes;
    } catch (e) {
      return false;
    }
  };

  // Numbers

  var random = function random(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  // Arrays

  var flattenArray = function flattenArray(arr) {
    return arr.reduce(function (a, b) {
      return a.concat(is.arr(b) ? flattenArray(b) : b);
    }, []);
  };

  var toArray = function toArray(o) {
    if (is.arr(o)) return o;
    if (is.str(o)) o = selectString(o) || o;
    if (o instanceof NodeList || o instanceof HTMLCollection) return [].slice.call(o);
    return [o];
  };

  var arrayContains = function arrayContains(arr, val) {
    return arr.some(function (a) {
      return a === val;
    });
  };

  var groupArrayByProps = function groupArrayByProps(arr, propsArr) {
    var groups = {};
    arr.forEach(function (o) {
      var group = JSON.stringify(propsArr.map(function (p) {
        return o[p];
      }));
      groups[group] = groups[group] || [];
      groups[group].push(o);
    });
    return Object.keys(groups).map(function (group) {
      return groups[group];
    });
  };

  var removeArrayDuplicates = function removeArrayDuplicates(arr) {
    return arr.filter(function (item, pos, self) {
      return self.indexOf(item) === pos;
    });
  };

  // Objects

  var cloneObject = function cloneObject(o) {
    var newObject = {};
    for (var p in o) {
      newObject[p] = o[p];
    }return newObject;
  };

  var mergeObjects = function mergeObjects(o1, o2) {
    for (var p in o2) {
      o1[p] = !is.und(o1[p]) ? o1[p] : o2[p];
    }return o1;
  };

  // Colors

  var hexToRgb = function hexToRgb(hex) {
    var rgx = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    var hex = hex.replace(rgx, function (m, r, g, b) {
      return r + r + g + g + b + b;
    });
    var rgb = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    var r = parseInt(rgb[1], 16);
    var g = parseInt(rgb[2], 16);
    var b = parseInt(rgb[3], 16);
    return 'rgb(' + r + ',' + g + ',' + b + ')';
  };

  var hslToRgb = function hslToRgb(hsl) {
    var hsl = /hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(hsl);
    var h = parseInt(hsl[1]) / 360;
    var s = parseInt(hsl[2]) / 100;
    var l = parseInt(hsl[3]) / 100;
    var hue2rgb = function hue2rgb(p, q, t) {
      if (t < 0) t += 1;
      if (t > 1) t -= 1;
      if (t < 1 / 6) return p + (q - p) * 6 * t;
      if (t < 1 / 2) return q;
      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
      return p;
    };
    var r, g, b;
    if (s == 0) {
      r = g = b = l;
    } else {
      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      var p = 2 * l - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }
    return 'rgb(' + r * 255 + ',' + g * 255 + ',' + b * 255 + ')';
  };

  var colorToRgb = function colorToRgb(val) {
    if (is.rgb(val)) return val;
    if (is.hex(val)) return hexToRgb(val);
    if (is.hsl(val)) return hslToRgb(val);
  };

  // Units

  var getUnit = function getUnit(val) {
    return (/([\+\-]?[0-9|auto\.]+)(%|px|pt|em|rem|in|cm|mm|ex|pc|vw|vh|deg)?/.exec(val)[2]
    );
  };

  var addDefaultTransformUnit = function addDefaultTransformUnit(prop, val, intialVal) {
    if (getUnit(val)) return val;
    if (prop.indexOf('translate') > -1) return getUnit(intialVal) ? val + getUnit(intialVal) : val + 'px';
    if (prop.indexOf('rotate') > -1 || prop.indexOf('skew') > -1) return val + 'deg';
    return val;
  };

  // Values

  var getCSSValue = function getCSSValue(el, prop) {
    // First check if prop is a valid CSS property
    if (prop in el.style) {
      // Then return the property value or fallback to '0' when getPropertyValue fails
      return getComputedStyle(el).getPropertyValue(stringToHyphens(prop)) || '0';
    }
  };

  var getTransformValue = function getTransformValue(el, prop) {
    var defaultVal = prop.indexOf('scale') > -1 ? 1 : 0;
    var str = el.style.transform;
    if (!str) return defaultVal;
    var rgx = /(\w+)\((.+?)\)/g;
    var match = [];
    var props = [];
    var values = [];
    while (match = rgx.exec(str)) {
      props.push(match[1]);
      values.push(match[2]);
    }
    var val = values.filter(function (f, i) {
      return props[i] === prop;
    });
    return val.length ? val[0] : defaultVal;
  };

  var getAnimationType = function getAnimationType(el, prop) {
    if (is.dom(el) && arrayContains(validTransforms, prop)) return 'transform';
    if (is.dom(el) && (el.getAttribute(prop) || is.svg(el) && el[prop])) return 'attribute';
    if (is.dom(el) && prop !== 'transform' && getCSSValue(el, prop)) return 'css';
    if (!is.nul(el[prop]) && !is.und(el[prop])) return 'object';
  };

  var getInitialTargetValue = function getInitialTargetValue(target, prop) {
    switch (getAnimationType(target, prop)) {
      case 'transform':
        return getTransformValue(target, prop);
      case 'css':
        return getCSSValue(target, prop);
      case 'attribute':
        return target.getAttribute(prop);
    }
    return target[prop] || 0;
  };

  var getValidValue = function getValidValue(values, val, originalCSS) {
    if (is.col(val)) return colorToRgb(val);
    if (getUnit(val)) return val;
    var unit = getUnit(values.to) ? getUnit(values.to) : getUnit(values.from);
    if (!unit && originalCSS) unit = getUnit(originalCSS);
    return unit ? val + unit : val;
  };

  var decomposeValue = function decomposeValue(val) {
    var rgx = /-?\d*\.?\d+/g;
    return {
      original: val,
      numbers: numberToString(val).match(rgx) ? numberToString(val).match(rgx).map(Number) : [0],
      strings: numberToString(val).split(rgx)
    };
  };

  var recomposeValue = function recomposeValue(numbers, strings, initialStrings) {
    return strings.reduce(function (a, b, i) {
      var b = b ? b : initialStrings[i - 1];
      return a + numbers[i - 1] + b;
    });
  };

  // Animatables

  var getAnimatables = function getAnimatables(targets) {
    var targets = targets ? flattenArray(is.arr(targets) ? targets.map(toArray) : toArray(targets)) : [];
    return targets.map(function (t, i) {
      return { target: t, id: i };
    });
  };

  // Properties

  var getProperties = function getProperties(params, settings) {
    var props = [];
    for (var p in params) {
      if (!defaultSettings.hasOwnProperty(p) && p !== 'targets') {
        var prop = is.obj(params[p]) ? cloneObject(params[p]) : { value: params[p] };
        prop.name = p;
        props.push(mergeObjects(prop, settings));
      }
    }
    return props;
  };

  var getPropertiesValues = function getPropertiesValues(target, prop, value, i) {
    var values = toArray(is.fnc(value) ? value(target, i) : value);
    return {
      from: values.length > 1 ? values[0] : getInitialTargetValue(target, prop),
      to: values.length > 1 ? values[1] : values[0]
    };
  };

  // Tweens

  var getTweenValues = function getTweenValues(prop, values, type, target) {
    var valid = {};
    if (type === 'transform') {
      valid.from = prop + '(' + addDefaultTransformUnit(prop, values.from, values.to) + ')';
      valid.to = prop + '(' + addDefaultTransformUnit(prop, values.to) + ')';
    } else {
      var originalCSS = type === 'css' ? getCSSValue(target, prop) : undefined;
      valid.from = getValidValue(values, values.from, originalCSS);
      valid.to = getValidValue(values, values.to, originalCSS);
    }
    return { from: decomposeValue(valid.from), to: decomposeValue(valid.to) };
  };

  var getTweensProps = function getTweensProps(animatables, props) {
    var tweensProps = [];
    animatables.forEach(function (animatable, i) {
      var target = animatable.target;
      return props.forEach(function (prop) {
        var animType = getAnimationType(target, prop.name);
        if (animType) {
          var values = getPropertiesValues(target, prop.name, prop.value, i);
          var tween = cloneObject(prop);
          tween.animatables = animatable;
          tween.type = animType;
          tween.from = getTweenValues(prop.name, values, tween.type, target).from;
          tween.to = getTweenValues(prop.name, values, tween.type, target).to;
          tween.round = is.col(values.from) || tween.round ? 1 : 0;
          tween.delay = (is.fnc(tween.delay) ? tween.delay(target, i, animatables.length) : tween.delay) / animation.speed;
          tween.duration = (is.fnc(tween.duration) ? tween.duration(target, i, animatables.length) : tween.duration) / animation.speed;
          tweensProps.push(tween);
        }
      });
    });
    return tweensProps;
  };

  var getTweens = function getTweens(animatables, props) {
    var tweensProps = getTweensProps(animatables, props);
    var splittedProps = groupArrayByProps(tweensProps, ['name', 'from', 'to', 'delay', 'duration']);
    return splittedProps.map(function (tweenProps) {
      var tween = cloneObject(tweenProps[0]);
      tween.animatables = tweenProps.map(function (p) {
        return p.animatables;
      });
      tween.totalDuration = tween.delay + tween.duration;
      return tween;
    });
  };

  var reverseTweens = function reverseTweens(anim, delays) {
    anim.tweens.forEach(function (tween) {
      var toVal = tween.to;
      var fromVal = tween.from;
      var delayVal = anim.duration - (tween.delay + tween.duration);
      tween.from = toVal;
      tween.to = fromVal;
      if (delays) tween.delay = delayVal;
    });
    anim.reversed = anim.reversed ? false : true;
  };

  var getTweensDuration = function getTweensDuration(tweens) {
    if (tweens.length) return Math.max.apply(Math, tweens.map(function (tween) {
      return tween.totalDuration;
    }));
  };

  // will-change

  var getWillChange = function getWillChange(anim) {
    var props = [];
    var els = [];
    anim.tweens.forEach(function (tween) {
      if (tween.type === 'css' || tween.type === 'transform') {
        props.push(tween.type === 'css' ? stringToHyphens(tween.name) : 'transform');
        tween.animatables.forEach(function (animatable) {
          els.push(animatable.target);
        });
      }
    });
    return {
      properties: removeArrayDuplicates(props).join(', '),
      elements: removeArrayDuplicates(els)
    };
  };

  var setWillChange = function setWillChange(anim) {
    var willChange = getWillChange(anim);
    willChange.elements.forEach(function (element) {
      element.style.willChange = willChange.properties;
    });
  };

  var removeWillChange = function removeWillChange(anim) {
    var willChange = getWillChange(anim);
    willChange.elements.forEach(function (element) {
      element.style.removeProperty('will-change');
    });
  };

  /* Svg path */

  var getPathProps = function getPathProps(path) {
    var el = is.str(path) ? selectString(path)[0] : path;
    return {
      path: el,
      value: el.getTotalLength()
    };
  };

  var snapProgressToPath = function snapProgressToPath(tween, progress) {
    var pathEl = tween.path;
    var pathProgress = tween.value * progress;
    var point = function point(offset) {
      var o = offset || 0;
      var p = progress > 1 ? tween.value + o : pathProgress + o;
      return pathEl.getPointAtLength(p);
    };
    var p = point();
    var p0 = point(-1);
    var p1 = point(+1);
    switch (tween.name) {
      case 'translateX':
        return p.x;
      case 'translateY':
        return p.y;
      case 'rotate':
        return Math.atan2(p1.y - p0.y, p1.x - p0.x) * 180 / Math.PI;
    }
  };

  // Progress

  var getTweenProgress = function getTweenProgress(tween, time) {
    var elapsed = Math.min(Math.max(time - tween.delay, 0), tween.duration);
    var percent = elapsed / tween.duration;
    var progress = tween.to.numbers.map(function (number, p) {
      var start = tween.from.numbers[p];
      var eased = easings[tween.easing](percent, tween.elasticity);
      var val = tween.path ? snapProgressToPath(tween, eased) : start + eased * (number - start);
      val = tween.round ? Math.round(val * tween.round) / tween.round : val;
      return val;
    });
    return recomposeValue(progress, tween.to.strings, tween.from.strings);
  };

  var setAnimationProgress = function setAnimationProgress(anim, time) {
    var transforms;
    anim.currentTime = time;
    anim.progress = time / anim.duration * 100;
    for (var t = 0; t < anim.tweens.length; t++) {
      var tween = anim.tweens[t];
      tween.currentValue = getTweenProgress(tween, time);
      var progress = tween.currentValue;
      for (var a = 0; a < tween.animatables.length; a++) {
        var animatable = tween.animatables[a];
        var id = animatable.id;
        var target = animatable.target;
        var name = tween.name;
        switch (tween.type) {
          case 'css':
            target.style[name] = progress;break;
          case 'attribute':
            target.setAttribute(name, progress);break;
          case 'object':
            target[name] = progress;break;
          case 'transform':
            if (!transforms) transforms = {};
            if (!transforms[id]) transforms[id] = [];
            transforms[id].push(progress);
            break;
        }
      }
    }
    if (transforms) {
      if (!transform) transform = (getCSSValue(document.body, transformStr) ? '' : '-webkit-') + transformStr;
      for (var t in transforms) {
        anim.animatables[t].target.style[transform] = transforms[t].join(' ');
      }
    }
    if (anim.settings.update) anim.settings.update(anim);
  };

  // Animation

  var createAnimation = function createAnimation(params) {
    var anim = {};
    anim.animatables = getAnimatables(params.targets);
    anim.settings = mergeObjects(params, defaultSettings);
    anim.properties = getProperties(params, anim.settings);
    anim.tweens = getTweens(anim.animatables, anim.properties);
    anim.duration = getTweensDuration(anim.tweens) || params.duration;
    anim.currentTime = 0;
    anim.progress = 0;
    anim.ended = false;
    return anim;
  };

  // Public

  var animations = [];
  var raf = 0;

  var engine = function () {
    var play = function play() {
      raf = requestAnimationFrame(step);
    };
    var step = function step(t) {
      if (animations.length) {
        for (var i = 0; i < animations.length; i++) {
          animations[i].tick(t);
        }play();
      } else {
        cancelAnimationFrame(raf);
        raf = 0;
      }
    };
    return play;
  }();

  var animation = function animation(params) {

    var anim = createAnimation(params);
    var time = {};

    anim.tick = function (now) {
      anim.ended = false;
      if (!time.start) time.start = now;
      time.current = Math.min(Math.max(time.last + now - time.start, 0), anim.duration);
      setAnimationProgress(anim, time.current);
      var s = anim.settings;
      if (s.begin && time.current >= s.delay) {
        s.begin(anim);s.begin = undefined;
      };
      if (time.current >= anim.duration) {
        if (s.loop) {
          time.start = now;
          if (s.direction === 'alternate') reverseTweens(anim, true);
          if (is.num(s.loop)) s.loop--;
        } else {
          anim.ended = true;
          anim.pause();
          if (s.complete) s.complete(anim);
        }
        time.last = 0;
      }
    };

    anim.seek = function (progress) {
      setAnimationProgress(anim, progress / 100 * anim.duration);
    };

    anim.pause = function () {
      removeWillChange(anim);
      var i = animations.indexOf(anim);
      if (i > -1) animations.splice(i, 1);
    };

    anim.play = function (params) {
      anim.pause();
      if (params) anim = mergeObjects(createAnimation(mergeObjects(params, anim.settings)), anim);
      time.start = 0;
      time.last = anim.ended ? 0 : anim.currentTime;
      var s = anim.settings;
      if (s.direction === 'reverse') reverseTweens(anim);
      if (s.direction === 'alternate' && !s.loop) s.loop = 1;
      setWillChange(anim);
      animations.push(anim);
      if (!raf) engine();
    };

    anim.restart = function () {
      if (anim.reversed) reverseTweens(anim);
      anim.pause();
      anim.seek(0);
      anim.play();
    };

    if (anim.settings.autoplay) anim.play();

    return anim;
  };

  // Remove one or multiple targets from all active animations.

  var remove = function remove(elements) {
    var targets = flattenArray(is.arr(elements) ? elements.map(toArray) : toArray(elements));
    for (var i = animations.length - 1; i >= 0; i--) {
      var animation = animations[i];
      var tweens = animation.tweens;
      for (var t = tweens.length - 1; t >= 0; t--) {
        var animatables = tweens[t].animatables;
        for (var a = animatables.length - 1; a >= 0; a--) {
          if (arrayContains(targets, animatables[a].target)) {
            animatables.splice(a, 1);
            if (!animatables.length) tweens.splice(t, 1);
            if (!tweens.length) animation.pause();
          }
        }
      }
    }
  };

  animation.version = version;
  animation.speed = 1;
  animation.list = animations;
  animation.remove = remove;
  animation.easings = easings;
  animation.getValue = getInitialTargetValue;
  animation.path = getPathProps;
  animation.random = random;

  return animation;
});
//# sourceMappingURL=data:application/json;base64,

"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
!function (a, b, c, d) {
  "use strict";
  function e(a, b, c) {
    return setTimeout(j(a, c), b);
  }function f(a, b, c) {
    return Array.isArray(a) ? (g(a, c[b], c), !0) : !1;
  }function g(a, b, c) {
    var e;if (a) if (a.forEach) a.forEach(b, c);else if (a.length !== d) for (e = 0; e < a.length;) {
      b.call(c, a[e], e, a), e++;
    } else for (e in a) {
      a.hasOwnProperty(e) && b.call(c, a[e], e, a);
    }
  }function h(b, c, d) {
    var e = "DEPRECATED METHOD: " + c + "\n" + d + " AT \n";return function () {
      var c = new Error("get-stack-trace"),
          d = c && c.stack ? c.stack.replace(/^[^\(]+?[\n$]/gm, "").replace(/^\s+at\s+/gm, "").replace(/^Object.<anonymous>\s*\(/gm, "{anonymous}()@") : "Unknown Stack Trace",
          f = a.console && (a.console.warn || a.console.log);return f && f.call(a.console, e, d), b.apply(this, arguments);
    };
  }function i(a, b, c) {
    var d,
        e = b.prototype;d = a.prototype = Object.create(e), d.constructor = a, d._super = e, c && la(d, c);
  }function j(a, b) {
    return function () {
      return a.apply(b, arguments);
    };
  }function k(a, b) {
    return (typeof a === "undefined" ? "undefined" : _typeof(a)) == oa ? a.apply(b ? b[0] || d : d, b) : a;
  }function l(a, b) {
    return a === d ? b : a;
  }function m(a, b, c) {
    g(q(b), function (b) {
      a.addEventListener(b, c, !1);
    });
  }function n(a, b, c) {
    g(q(b), function (b) {
      a.removeEventListener(b, c, !1);
    });
  }function o(a, b) {
    for (; a;) {
      if (a == b) return !0;a = a.parentNode;
    }return !1;
  }function p(a, b) {
    return a.indexOf(b) > -1;
  }function q(a) {
    return a.trim().split(/\s+/g);
  }function r(a, b, c) {
    if (a.indexOf && !c) return a.indexOf(b);for (var d = 0; d < a.length;) {
      if (c && a[d][c] == b || !c && a[d] === b) return d;d++;
    }return -1;
  }function s(a) {
    return Array.prototype.slice.call(a, 0);
  }function t(a, b, c) {
    for (var d = [], e = [], f = 0; f < a.length;) {
      var g = b ? a[f][b] : a[f];r(e, g) < 0 && d.push(a[f]), e[f] = g, f++;
    }return c && (d = b ? d.sort(function (a, c) {
      return a[b] > c[b];
    }) : d.sort()), d;
  }function u(a, b) {
    for (var c, e, f = b[0].toUpperCase() + b.slice(1), g = 0; g < ma.length;) {
      if (c = ma[g], e = c ? c + f : b, e in a) return e;g++;
    }return d;
  }function v() {
    return ua++;
  }function w(b) {
    var c = b.ownerDocument || b;return c.defaultView || c.parentWindow || a;
  }function x(a, b) {
    var c = this;this.manager = a, this.callback = b, this.element = a.element, this.target = a.options.inputTarget, this.domHandler = function (b) {
      k(a.options.enable, [a]) && c.handler(b);
    }, this.init();
  }function y(a) {
    var b,
        c = a.options.inputClass;return new (b = c ? c : xa ? M : ya ? P : wa ? R : L)(a, z);
  }function z(a, b, c) {
    var d = c.pointers.length,
        e = c.changedPointers.length,
        f = b & Ea && d - e === 0,
        g = b & (Ga | Ha) && d - e === 0;c.isFirst = !!f, c.isFinal = !!g, f && (a.session = {}), c.eventType = b, A(a, c), a.emit("hammer.input", c), a.recognize(c), a.session.prevInput = c;
  }function A(a, b) {
    var c = a.session,
        d = b.pointers,
        e = d.length;c.firstInput || (c.firstInput = D(b)), e > 1 && !c.firstMultiple ? c.firstMultiple = D(b) : 1 === e && (c.firstMultiple = !1);var f = c.firstInput,
        g = c.firstMultiple,
        h = g ? g.center : f.center,
        i = b.center = E(d);b.timeStamp = ra(), b.deltaTime = b.timeStamp - f.timeStamp, b.angle = I(h, i), b.distance = H(h, i), B(c, b), b.offsetDirection = G(b.deltaX, b.deltaY);var j = F(b.deltaTime, b.deltaX, b.deltaY);b.overallVelocityX = j.x, b.overallVelocityY = j.y, b.overallVelocity = qa(j.x) > qa(j.y) ? j.x : j.y, b.scale = g ? K(g.pointers, d) : 1, b.rotation = g ? J(g.pointers, d) : 0, b.maxPointers = c.prevInput ? b.pointers.length > c.prevInput.maxPointers ? b.pointers.length : c.prevInput.maxPointers : b.pointers.length, C(c, b);var k = a.element;o(b.srcEvent.target, k) && (k = b.srcEvent.target), b.target = k;
  }function B(a, b) {
    var c = b.center,
        d = a.offsetDelta || {},
        e = a.prevDelta || {},
        f = a.prevInput || {};b.eventType !== Ea && f.eventType !== Ga || (e = a.prevDelta = { x: f.deltaX || 0, y: f.deltaY || 0 }, d = a.offsetDelta = { x: c.x, y: c.y }), b.deltaX = e.x + (c.x - d.x), b.deltaY = e.y + (c.y - d.y);
  }function C(a, b) {
    var c,
        e,
        f,
        g,
        h = a.lastInterval || b,
        i = b.timeStamp - h.timeStamp;if (b.eventType != Ha && (i > Da || h.velocity === d)) {
      var j = b.deltaX - h.deltaX,
          k = b.deltaY - h.deltaY,
          l = F(i, j, k);e = l.x, f = l.y, c = qa(l.x) > qa(l.y) ? l.x : l.y, g = G(j, k), a.lastInterval = b;
    } else c = h.velocity, e = h.velocityX, f = h.velocityY, g = h.direction;b.velocity = c, b.velocityX = e, b.velocityY = f, b.direction = g;
  }function D(a) {
    for (var b = [], c = 0; c < a.pointers.length;) {
      b[c] = { clientX: pa(a.pointers[c].clientX), clientY: pa(a.pointers[c].clientY) }, c++;
    }return { timeStamp: ra(), pointers: b, center: E(b), deltaX: a.deltaX, deltaY: a.deltaY };
  }function E(a) {
    var b = a.length;if (1 === b) return { x: pa(a[0].clientX), y: pa(a[0].clientY) };for (var c = 0, d = 0, e = 0; b > e;) {
      c += a[e].clientX, d += a[e].clientY, e++;
    }return { x: pa(c / b), y: pa(d / b) };
  }function F(a, b, c) {
    return { x: b / a || 0, y: c / a || 0 };
  }function G(a, b) {
    return a === b ? Ia : qa(a) >= qa(b) ? 0 > a ? Ja : Ka : 0 > b ? La : Ma;
  }function H(a, b, c) {
    c || (c = Qa);var d = b[c[0]] - a[c[0]],
        e = b[c[1]] - a[c[1]];return Math.sqrt(d * d + e * e);
  }function I(a, b, c) {
    c || (c = Qa);var d = b[c[0]] - a[c[0]],
        e = b[c[1]] - a[c[1]];return 180 * Math.atan2(e, d) / Math.PI;
  }function J(a, b) {
    return I(b[1], b[0], Ra) + I(a[1], a[0], Ra);
  }function K(a, b) {
    return H(b[0], b[1], Ra) / H(a[0], a[1], Ra);
  }function L() {
    this.evEl = Ta, this.evWin = Ua, this.pressed = !1, x.apply(this, arguments);
  }function M() {
    this.evEl = Xa, this.evWin = Ya, x.apply(this, arguments), this.store = this.manager.session.pointerEvents = [];
  }function N() {
    this.evTarget = $a, this.evWin = _a, this.started = !1, x.apply(this, arguments);
  }function O(a, b) {
    var c = s(a.touches),
        d = s(a.changedTouches);return b & (Ga | Ha) && (c = t(c.concat(d), "identifier", !0)), [c, d];
  }function P() {
    this.evTarget = bb, this.targetIds = {}, x.apply(this, arguments);
  }function Q(a, b) {
    var c = s(a.touches),
        d = this.targetIds;if (b & (Ea | Fa) && 1 === c.length) return d[c[0].identifier] = !0, [c, c];var e,
        f,
        g = s(a.changedTouches),
        h = [],
        i = this.target;if (f = c.filter(function (a) {
      return o(a.target, i);
    }), b === Ea) for (e = 0; e < f.length;) {
      d[f[e].identifier] = !0, e++;
    }for (e = 0; e < g.length;) {
      d[g[e].identifier] && h.push(g[e]), b & (Ga | Ha) && delete d[g[e].identifier], e++;
    }return h.length ? [t(f.concat(h), "identifier", !0), h] : void 0;
  }function R() {
    x.apply(this, arguments);var a = j(this.handler, this);this.touch = new P(this.manager, a), this.mouse = new L(this.manager, a), this.primaryTouch = null, this.lastTouches = [];
  }function S(a, b) {
    a & Ea ? (this.primaryTouch = b.changedPointers[0].identifier, T.call(this, b)) : a & (Ga | Ha) && T.call(this, b);
  }function T(a) {
    var b = a.changedPointers[0];if (b.identifier === this.primaryTouch) {
      var c = { x: b.clientX, y: b.clientY };this.lastTouches.push(c);var d = this.lastTouches,
          e = function e() {
        var a = d.indexOf(c);a > -1 && d.splice(a, 1);
      };setTimeout(e, cb);
    }
  }function U(a) {
    for (var b = a.srcEvent.clientX, c = a.srcEvent.clientY, d = 0; d < this.lastTouches.length; d++) {
      var e = this.lastTouches[d],
          f = Math.abs(b - e.x),
          g = Math.abs(c - e.y);if (db >= f && db >= g) return !0;
    }return !1;
  }function V(a, b) {
    this.manager = a, this.set(b);
  }function W(a) {
    if (p(a, jb)) return jb;var b = p(a, kb),
        c = p(a, lb);return b && c ? jb : b || c ? b ? kb : lb : p(a, ib) ? ib : hb;
  }function X() {
    if (!fb) return !1;var b = {},
        c = a.CSS && a.CSS.supports;return ["auto", "manipulation", "pan-y", "pan-x", "pan-x pan-y", "none"].forEach(function (d) {
      b[d] = c ? a.CSS.supports("touch-action", d) : !0;
    }), b;
  }function Y(a) {
    this.options = la({}, this.defaults, a || {}), this.id = v(), this.manager = null, this.options.enable = l(this.options.enable, !0), this.state = nb, this.simultaneous = {}, this.requireFail = [];
  }function Z(a) {
    return a & sb ? "cancel" : a & qb ? "end" : a & pb ? "move" : a & ob ? "start" : "";
  }function $(a) {
    return a == Ma ? "down" : a == La ? "up" : a == Ja ? "left" : a == Ka ? "right" : "";
  }function _(a, b) {
    var c = b.manager;return c ? c.get(a) : a;
  }function aa() {
    Y.apply(this, arguments);
  }function ba() {
    aa.apply(this, arguments), this.pX = null, this.pY = null;
  }function ca() {
    aa.apply(this, arguments);
  }function da() {
    Y.apply(this, arguments), this._timer = null, this._input = null;
  }function ea() {
    aa.apply(this, arguments);
  }function fa() {
    aa.apply(this, arguments);
  }function ga() {
    Y.apply(this, arguments), this.pTime = !1, this.pCenter = !1, this._timer = null, this._input = null, this.count = 0;
  }function ha(a, b) {
    return b = b || {}, b.recognizers = l(b.recognizers, ha.defaults.preset), new ia(a, b);
  }function ia(a, b) {
    this.options = la({}, ha.defaults, b || {}), this.options.inputTarget = this.options.inputTarget || a, this.handlers = {}, this.session = {}, this.recognizers = [], this.oldCssProps = {}, this.element = a, this.input = y(this), this.touchAction = new V(this, this.options.touchAction), ja(this, !0), g(this.options.recognizers, function (a) {
      var b = this.add(new a[0](a[1]));a[2] && b.recognizeWith(a[2]), a[3] && b.requireFailure(a[3]);
    }, this);
  }function ja(a, b) {
    var c = a.element;if (c.style) {
      var d;g(a.options.cssProps, function (e, f) {
        d = u(c.style, f), b ? (a.oldCssProps[d] = c.style[d], c.style[d] = e) : c.style[d] = a.oldCssProps[d] || "";
      }), b || (a.oldCssProps = {});
    }
  }function ka(a, c) {
    var d = b.createEvent("Event");d.initEvent(a, !0, !0), d.gesture = c, c.target.dispatchEvent(d);
  }var la,
      ma = ["", "webkit", "Moz", "MS", "ms", "o"],
      na = b.createElement("div"),
      oa = "function",
      pa = Math.round,
      qa = Math.abs,
      ra = Date.now;la = "function" != typeof Object.assign ? function (a) {
    if (a === d || null === a) throw new TypeError("Cannot convert undefined or null to object");for (var b = Object(a), c = 1; c < arguments.length; c++) {
      var e = arguments[c];if (e !== d && null !== e) for (var f in e) {
        e.hasOwnProperty(f) && (b[f] = e[f]);
      }
    }return b;
  } : Object.assign;var sa = h(function (a, b, c) {
    for (var e = Object.keys(b), f = 0; f < e.length;) {
      (!c || c && a[e[f]] === d) && (a[e[f]] = b[e[f]]), f++;
    }return a;
  }, "extend", "Use `assign`."),
      ta = h(function (a, b) {
    return sa(a, b, !0);
  }, "merge", "Use `assign`."),
      ua = 1,
      va = /mobile|tablet|ip(ad|hone|od)|android/i,
      wa = "ontouchstart" in a,
      xa = u(a, "PointerEvent") !== d,
      ya = wa && va.test(navigator.userAgent),
      za = "touch",
      Aa = "pen",
      Ba = "mouse",
      Ca = "kinect",
      Da = 25,
      Ea = 1,
      Fa = 2,
      Ga = 4,
      Ha = 8,
      Ia = 1,
      Ja = 2,
      Ka = 4,
      La = 8,
      Ma = 16,
      Na = Ja | Ka,
      Oa = La | Ma,
      Pa = Na | Oa,
      Qa = ["x", "y"],
      Ra = ["clientX", "clientY"];x.prototype = { handler: function handler() {}, init: function init() {
      this.evEl && m(this.element, this.evEl, this.domHandler), this.evTarget && m(this.target, this.evTarget, this.domHandler), this.evWin && m(w(this.element), this.evWin, this.domHandler);
    }, destroy: function destroy() {
      this.evEl && n(this.element, this.evEl, this.domHandler), this.evTarget && n(this.target, this.evTarget, this.domHandler), this.evWin && n(w(this.element), this.evWin, this.domHandler);
    } };var Sa = { mousedown: Ea, mousemove: Fa, mouseup: Ga },
      Ta = "mousedown",
      Ua = "mousemove mouseup";i(L, x, { handler: function handler(a) {
      var b = Sa[a.type];b & Ea && 0 === a.button && (this.pressed = !0), b & Fa && 1 !== a.which && (b = Ga), this.pressed && (b & Ga && (this.pressed = !1), this.callback(this.manager, b, { pointers: [a], changedPointers: [a], pointerType: Ba, srcEvent: a }));
    } });var Va = { pointerdown: Ea, pointermove: Fa, pointerup: Ga, pointercancel: Ha, pointerout: Ha },
      Wa = { 2: za, 3: Aa, 4: Ba, 5: Ca },
      Xa = "pointerdown",
      Ya = "pointermove pointerup pointercancel";a.MSPointerEvent && !a.PointerEvent && (Xa = "MSPointerDown", Ya = "MSPointerMove MSPointerUp MSPointerCancel"), i(M, x, { handler: function handler(a) {
      var b = this.store,
          c = !1,
          d = a.type.toLowerCase().replace("ms", ""),
          e = Va[d],
          f = Wa[a.pointerType] || a.pointerType,
          g = f == za,
          h = r(b, a.pointerId, "pointerId");e & Ea && (0 === a.button || g) ? 0 > h && (b.push(a), h = b.length - 1) : e & (Ga | Ha) && (c = !0), 0 > h || (b[h] = a, this.callback(this.manager, e, { pointers: b, changedPointers: [a], pointerType: f, srcEvent: a }), c && b.splice(h, 1));
    } });var Za = { touchstart: Ea, touchmove: Fa, touchend: Ga, touchcancel: Ha },
      $a = "touchstart",
      _a = "touchstart touchmove touchend touchcancel";i(N, x, { handler: function handler(a) {
      var b = Za[a.type];if (b === Ea && (this.started = !0), this.started) {
        var c = O.call(this, a, b);b & (Ga | Ha) && c[0].length - c[1].length === 0 && (this.started = !1), this.callback(this.manager, b, { pointers: c[0], changedPointers: c[1], pointerType: za, srcEvent: a });
      }
    } });var ab = { touchstart: Ea, touchmove: Fa, touchend: Ga, touchcancel: Ha },
      bb = "touchstart touchmove touchend touchcancel";i(P, x, { handler: function handler(a) {
      var b = ab[a.type],
          c = Q.call(this, a, b);c && this.callback(this.manager, b, { pointers: c[0], changedPointers: c[1], pointerType: za, srcEvent: a });
    } });var cb = 2500,
      db = 25;i(R, x, { handler: function handler(a, b, c) {
      var d = c.pointerType == za,
          e = c.pointerType == Ba;if (!(e && c.sourceCapabilities && c.sourceCapabilities.firesTouchEvents)) {
        if (d) S.call(this, b, c);else if (e && U.call(this, c)) return;this.callback(a, b, c);
      }
    }, destroy: function destroy() {
      this.touch.destroy(), this.mouse.destroy();
    } });var eb = u(na.style, "touchAction"),
      fb = eb !== d,
      gb = "compute",
      hb = "auto",
      ib = "manipulation",
      jb = "none",
      kb = "pan-x",
      lb = "pan-y",
      mb = X();V.prototype = { set: function set(a) {
      a == gb && (a = this.compute()), fb && this.manager.element.style && mb[a] && (this.manager.element.style[eb] = a), this.actions = a.toLowerCase().trim();
    }, update: function update() {
      this.set(this.manager.options.touchAction);
    }, compute: function compute() {
      var a = [];return g(this.manager.recognizers, function (b) {
        k(b.options.enable, [b]) && (a = a.concat(b.getTouchAction()));
      }), W(a.join(" "));
    }, preventDefaults: function preventDefaults(a) {
      var b = a.srcEvent,
          c = a.offsetDirection;if (this.manager.session.prevented) return void b.preventDefault();var d = this.actions,
          e = p(d, jb) && !mb[jb],
          f = p(d, lb) && !mb[lb],
          g = p(d, kb) && !mb[kb];if (e) {
        var h = 1 === a.pointers.length,
            i = a.distance < 2,
            j = a.deltaTime < 250;if (h && i && j) return;
      }return g && f ? void 0 : e || f && c & Na || g && c & Oa ? this.preventSrc(b) : void 0;
    }, preventSrc: function preventSrc(a) {
      this.manager.session.prevented = !0, a.preventDefault();
    } };var nb = 1,
      ob = 2,
      pb = 4,
      qb = 8,
      rb = qb,
      sb = 16,
      tb = 32;Y.prototype = { defaults: {}, set: function set(a) {
      return la(this.options, a), this.manager && this.manager.touchAction.update(), this;
    }, recognizeWith: function recognizeWith(a) {
      if (f(a, "recognizeWith", this)) return this;var b = this.simultaneous;return a = _(a, this), b[a.id] || (b[a.id] = a, a.recognizeWith(this)), this;
    }, dropRecognizeWith: function dropRecognizeWith(a) {
      return f(a, "dropRecognizeWith", this) ? this : (a = _(a, this), delete this.simultaneous[a.id], this);
    }, requireFailure: function requireFailure(a) {
      if (f(a, "requireFailure", this)) return this;var b = this.requireFail;return a = _(a, this), -1 === r(b, a) && (b.push(a), a.requireFailure(this)), this;
    }, dropRequireFailure: function dropRequireFailure(a) {
      if (f(a, "dropRequireFailure", this)) return this;a = _(a, this);var b = r(this.requireFail, a);return b > -1 && this.requireFail.splice(b, 1), this;
    }, hasRequireFailures: function hasRequireFailures() {
      return this.requireFail.length > 0;
    }, canRecognizeWith: function canRecognizeWith(a) {
      return !!this.simultaneous[a.id];
    }, emit: function emit(a) {
      function b(b) {
        c.manager.emit(b, a);
      }var c = this,
          d = this.state;qb > d && b(c.options.event + Z(d)), b(c.options.event), a.additionalEvent && b(a.additionalEvent), d >= qb && b(c.options.event + Z(d));
    }, tryEmit: function tryEmit(a) {
      return this.canEmit() ? this.emit(a) : void (this.state = tb);
    }, canEmit: function canEmit() {
      for (var a = 0; a < this.requireFail.length;) {
        if (!(this.requireFail[a].state & (tb | nb))) return !1;a++;
      }return !0;
    }, recognize: function recognize(a) {
      var b = la({}, a);return k(this.options.enable, [this, b]) ? (this.state & (rb | sb | tb) && (this.state = nb), this.state = this.process(b), void (this.state & (ob | pb | qb | sb) && this.tryEmit(b))) : (this.reset(), void (this.state = tb));
    }, process: function process(a) {}, getTouchAction: function getTouchAction() {}, reset: function reset() {} }, i(aa, Y, { defaults: { pointers: 1 }, attrTest: function attrTest(a) {
      var b = this.options.pointers;return 0 === b || a.pointers.length === b;
    }, process: function process(a) {
      var b = this.state,
          c = a.eventType,
          d = b & (ob | pb),
          e = this.attrTest(a);return d && (c & Ha || !e) ? b | sb : d || e ? c & Ga ? b | qb : b & ob ? b | pb : ob : tb;
    } }), i(ba, aa, { defaults: { event: "pan", threshold: 10, pointers: 1, direction: Pa }, getTouchAction: function getTouchAction() {
      var a = this.options.direction,
          b = [];return a & Na && b.push(lb), a & Oa && b.push(kb), b;
    }, directionTest: function directionTest(a) {
      var b = this.options,
          c = !0,
          d = a.distance,
          e = a.direction,
          f = a.deltaX,
          g = a.deltaY;return e & b.direction || (b.direction & Na ? (e = 0 === f ? Ia : 0 > f ? Ja : Ka, c = f != this.pX, d = Math.abs(a.deltaX)) : (e = 0 === g ? Ia : 0 > g ? La : Ma, c = g != this.pY, d = Math.abs(a.deltaY))), a.direction = e, c && d > b.threshold && e & b.direction;
    }, attrTest: function attrTest(a) {
      return aa.prototype.attrTest.call(this, a) && (this.state & ob || !(this.state & ob) && this.directionTest(a));
    }, emit: function emit(a) {
      this.pX = a.deltaX, this.pY = a.deltaY;var b = $(a.direction);b && (a.additionalEvent = this.options.event + b), this._super.emit.call(this, a);
    } }), i(ca, aa, { defaults: { event: "pinch", threshold: 0, pointers: 2 }, getTouchAction: function getTouchAction() {
      return [jb];
    }, attrTest: function attrTest(a) {
      return this._super.attrTest.call(this, a) && (Math.abs(a.scale - 1) > this.options.threshold || this.state & ob);
    }, emit: function emit(a) {
      if (1 !== a.scale) {
        var b = a.scale < 1 ? "in" : "out";a.additionalEvent = this.options.event + b;
      }this._super.emit.call(this, a);
    } }), i(da, Y, { defaults: { event: "press", pointers: 1, time: 251, threshold: 9 }, getTouchAction: function getTouchAction() {
      return [hb];
    }, process: function process(a) {
      var b = this.options,
          c = a.pointers.length === b.pointers,
          d = a.distance < b.threshold,
          f = a.deltaTime > b.time;if (this._input = a, !d || !c || a.eventType & (Ga | Ha) && !f) this.reset();else if (a.eventType & Ea) this.reset(), this._timer = e(function () {
        this.state = rb, this.tryEmit();
      }, b.time, this);else if (a.eventType & Ga) return rb;return tb;
    }, reset: function reset() {
      clearTimeout(this._timer);
    }, emit: function emit(a) {
      this.state === rb && (a && a.eventType & Ga ? this.manager.emit(this.options.event + "up", a) : (this._input.timeStamp = ra(), this.manager.emit(this.options.event, this._input)));
    } }), i(ea, aa, { defaults: { event: "rotate", threshold: 0, pointers: 2 }, getTouchAction: function getTouchAction() {
      return [jb];
    }, attrTest: function attrTest(a) {
      return this._super.attrTest.call(this, a) && (Math.abs(a.rotation) > this.options.threshold || this.state & ob);
    } }), i(fa, aa, { defaults: { event: "swipe", threshold: 10, velocity: .3, direction: Na | Oa, pointers: 1 }, getTouchAction: function getTouchAction() {
      return ba.prototype.getTouchAction.call(this);
    }, attrTest: function attrTest(a) {
      var b,
          c = this.options.direction;return c & (Na | Oa) ? b = a.overallVelocity : c & Na ? b = a.overallVelocityX : c & Oa && (b = a.overallVelocityY), this._super.attrTest.call(this, a) && c & a.offsetDirection && a.distance > this.options.threshold && a.maxPointers == this.options.pointers && qa(b) > this.options.velocity && a.eventType & Ga;
    }, emit: function emit(a) {
      var b = $(a.offsetDirection);b && this.manager.emit(this.options.event + b, a), this.manager.emit(this.options.event, a);
    } }), i(ga, Y, { defaults: { event: "tap", pointers: 1, taps: 1, interval: 300, time: 250, threshold: 9, posThreshold: 10 }, getTouchAction: function getTouchAction() {
      return [ib];
    }, process: function process(a) {
      var b = this.options,
          c = a.pointers.length === b.pointers,
          d = a.distance < b.threshold,
          f = a.deltaTime < b.time;if (this.reset(), a.eventType & Ea && 0 === this.count) return this.failTimeout();if (d && f && c) {
        if (a.eventType != Ga) return this.failTimeout();var g = this.pTime ? a.timeStamp - this.pTime < b.interval : !0,
            h = !this.pCenter || H(this.pCenter, a.center) < b.posThreshold;this.pTime = a.timeStamp, this.pCenter = a.center, h && g ? this.count += 1 : this.count = 1, this._input = a;var i = this.count % b.taps;if (0 === i) return this.hasRequireFailures() ? (this._timer = e(function () {
          this.state = rb, this.tryEmit();
        }, b.interval, this), ob) : rb;
      }return tb;
    }, failTimeout: function failTimeout() {
      return this._timer = e(function () {
        this.state = tb;
      }, this.options.interval, this), tb;
    }, reset: function reset() {
      clearTimeout(this._timer);
    }, emit: function emit() {
      this.state == rb && (this._input.tapCount = this.count, this.manager.emit(this.options.event, this._input));
    } }), ha.VERSION = "2.0.7", ha.defaults = { domEvents: !1, touchAction: gb, enable: !0, inputTarget: null, inputClass: null, preset: [[ea, { enable: !1 }], [ca, { enable: !1 }, ["rotate"]], [fa, { direction: Na }], [ba, { direction: Na }, ["swipe"]], [ga], [ga, { event: "doubletap", taps: 2 }, ["tap"]], [da]], cssProps: { userSelect: "none", touchSelect: "none", touchCallout: "none", contentZooming: "none", userDrag: "none", tapHighlightColor: "rgba(0,0,0,0)" } };var ub = 1,
      vb = 2;ia.prototype = { set: function set(a) {
      return la(this.options, a), a.touchAction && this.touchAction.update(), a.inputTarget && (this.input.destroy(), this.input.target = a.inputTarget, this.input.init()), this;
    }, stop: function stop(a) {
      this.session.stopped = a ? vb : ub;
    }, recognize: function recognize(a) {
      var b = this.session;if (!b.stopped) {
        this.touchAction.preventDefaults(a);var c,
            d = this.recognizers,
            e = b.curRecognizer;(!e || e && e.state & rb) && (e = b.curRecognizer = null);for (var f = 0; f < d.length;) {
          c = d[f], b.stopped === vb || e && c != e && !c.canRecognizeWith(e) ? c.reset() : c.recognize(a), !e && c.state & (ob | pb | qb) && (e = b.curRecognizer = c), f++;
        }
      }
    }, get: function get(a) {
      if (a instanceof Y) return a;for (var b = this.recognizers, c = 0; c < b.length; c++) {
        if (b[c].options.event == a) return b[c];
      }return null;
    }, add: function add(a) {
      if (f(a, "add", this)) return this;var b = this.get(a.options.event);return b && this.remove(b), this.recognizers.push(a), a.manager = this, this.touchAction.update(), a;
    }, remove: function remove(a) {
      if (f(a, "remove", this)) return this;if (a = this.get(a)) {
        var b = this.recognizers,
            c = r(b, a);-1 !== c && (b.splice(c, 1), this.touchAction.update());
      }return this;
    }, on: function on(a, b) {
      if (a !== d && b !== d) {
        var c = this.handlers;return g(q(a), function (a) {
          c[a] = c[a] || [], c[a].push(b);
        }), this;
      }
    }, off: function off(a, b) {
      if (a !== d) {
        var c = this.handlers;return g(q(a), function (a) {
          b ? c[a] && c[a].splice(r(c[a], b), 1) : delete c[a];
        }), this;
      }
    }, emit: function emit(a, b) {
      this.options.domEvents && ka(a, b);var c = this.handlers[a] && this.handlers[a].slice();if (c && c.length) {
        b.type = a, b.preventDefault = function () {
          b.srcEvent.preventDefault();
        };for (var d = 0; d < c.length;) {
          c[d](b), d++;
        }
      }
    }, destroy: function destroy() {
      this.element && ja(this, !1), this.handlers = {}, this.session = {}, this.input.destroy(), this.element = null;
    } }, la(ha, { INPUT_START: Ea, INPUT_MOVE: Fa, INPUT_END: Ga, INPUT_CANCEL: Ha, STATE_POSSIBLE: nb, STATE_BEGAN: ob, STATE_CHANGED: pb, STATE_ENDED: qb, STATE_RECOGNIZED: rb, STATE_CANCELLED: sb, STATE_FAILED: tb, DIRECTION_NONE: Ia, DIRECTION_LEFT: Ja, DIRECTION_RIGHT: Ka, DIRECTION_UP: La, DIRECTION_DOWN: Ma, DIRECTION_HORIZONTAL: Na, DIRECTION_VERTICAL: Oa, DIRECTION_ALL: Pa, Manager: ia, Input: x, TouchAction: V, TouchInput: P, MouseInput: L, PointerEventInput: M, TouchMouseInput: R, SingleTouchInput: N, Recognizer: Y, AttrRecognizer: aa, Tap: ga, Pan: ba, Swipe: fa, Pinch: ca, Rotate: ea, Press: da, on: m, off: n, each: g, merge: ta, extend: sa, assign: la, inherit: i, bindFn: j, prefixed: u });var wb = "undefined" != typeof a ? a : "undefined" != typeof self ? self : {};wb.Hammer = ha, "function" == typeof define && define.amd ? define(function () {
    return ha;
  }) : "undefined" != typeof module && module.exports ? module.exports = ha : a[c] = ha;
}(window, document, "Hammer");
//# sourceMappingURL=hammer.min.js.map
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhbW1lci5taW4uanMiXSwibmFtZXMiOlsiYSIsImIiLCJjIiwiZCIsImUiLCJzZXRUaW1lb3V0IiwiaiIsImYiLCJBcnJheSIsImlzQXJyYXkiLCJnIiwiZm9yRWFjaCIsImxlbmd0aCIsImNhbGwiLCJoYXNPd25Qcm9wZXJ0eSIsImgiLCJFcnJvciIsInN0YWNrIiwicmVwbGFjZSIsImNvbnNvbGUiLCJ3YXJuIiwibG9nIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJpIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJfc3VwZXIiLCJsYSIsImsiLCJvYSIsImwiLCJtIiwicSIsImFkZEV2ZW50TGlzdGVuZXIiLCJuIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm8iLCJwYXJlbnROb2RlIiwicCIsImluZGV4T2YiLCJ0cmltIiwic3BsaXQiLCJyIiwicyIsInNsaWNlIiwidCIsInB1c2giLCJzb3J0IiwidSIsInRvVXBwZXJDYXNlIiwibWEiLCJ2IiwidWEiLCJ3Iiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93IiwieCIsIm1hbmFnZXIiLCJjYWxsYmFjayIsImVsZW1lbnQiLCJ0YXJnZXQiLCJvcHRpb25zIiwiaW5wdXRUYXJnZXQiLCJkb21IYW5kbGVyIiwiZW5hYmxlIiwiaGFuZGxlciIsImluaXQiLCJ5IiwiaW5wdXRDbGFzcyIsInhhIiwiTSIsInlhIiwiUCIsIndhIiwiUiIsIkwiLCJ6IiwicG9pbnRlcnMiLCJjaGFuZ2VkUG9pbnRlcnMiLCJFYSIsIkdhIiwiSGEiLCJpc0ZpcnN0IiwiaXNGaW5hbCIsInNlc3Npb24iLCJldmVudFR5cGUiLCJBIiwiZW1pdCIsInJlY29nbml6ZSIsInByZXZJbnB1dCIsImZpcnN0SW5wdXQiLCJEIiwiZmlyc3RNdWx0aXBsZSIsImNlbnRlciIsIkUiLCJ0aW1lU3RhbXAiLCJyYSIsImRlbHRhVGltZSIsImFuZ2xlIiwiSSIsImRpc3RhbmNlIiwiSCIsIkIiLCJvZmZzZXREaXJlY3Rpb24iLCJHIiwiZGVsdGFYIiwiZGVsdGFZIiwiRiIsIm92ZXJhbGxWZWxvY2l0eVgiLCJvdmVyYWxsVmVsb2NpdHlZIiwib3ZlcmFsbFZlbG9jaXR5IiwicWEiLCJzY2FsZSIsIksiLCJyb3RhdGlvbiIsIkoiLCJtYXhQb2ludGVycyIsIkMiLCJzcmNFdmVudCIsIm9mZnNldERlbHRhIiwicHJldkRlbHRhIiwibGFzdEludGVydmFsIiwiRGEiLCJ2ZWxvY2l0eSIsInZlbG9jaXR5WCIsInZlbG9jaXR5WSIsImRpcmVjdGlvbiIsImNsaWVudFgiLCJwYSIsImNsaWVudFkiLCJJYSIsIkphIiwiS2EiLCJMYSIsIk1hIiwiUWEiLCJNYXRoIiwic3FydCIsImF0YW4yIiwiUEkiLCJSYSIsImV2RWwiLCJUYSIsImV2V2luIiwiVWEiLCJwcmVzc2VkIiwiWGEiLCJZYSIsInN0b3JlIiwicG9pbnRlckV2ZW50cyIsIk4iLCJldlRhcmdldCIsIiRhIiwiX2EiLCJzdGFydGVkIiwiTyIsInRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsImNvbmNhdCIsImJiIiwidGFyZ2V0SWRzIiwiUSIsIkZhIiwiaWRlbnRpZmllciIsImZpbHRlciIsInRvdWNoIiwibW91c2UiLCJwcmltYXJ5VG91Y2giLCJsYXN0VG91Y2hlcyIsIlMiLCJUIiwic3BsaWNlIiwiY2IiLCJVIiwiYWJzIiwiZGIiLCJWIiwic2V0IiwiVyIsImpiIiwia2IiLCJsYiIsImliIiwiaGIiLCJYIiwiZmIiLCJDU1MiLCJzdXBwb3J0cyIsIlkiLCJkZWZhdWx0cyIsImlkIiwic3RhdGUiLCJuYiIsInNpbXVsdGFuZW91cyIsInJlcXVpcmVGYWlsIiwiWiIsInNiIiwicWIiLCJwYiIsIm9iIiwiJCIsIl8iLCJnZXQiLCJhYSIsImJhIiwicFgiLCJwWSIsImNhIiwiZGEiLCJfdGltZXIiLCJfaW5wdXQiLCJlYSIsImZhIiwiZ2EiLCJwVGltZSIsInBDZW50ZXIiLCJjb3VudCIsImhhIiwicmVjb2duaXplcnMiLCJwcmVzZXQiLCJpYSIsImhhbmRsZXJzIiwib2xkQ3NzUHJvcHMiLCJpbnB1dCIsInRvdWNoQWN0aW9uIiwiamEiLCJhZGQiLCJyZWNvZ25pemVXaXRoIiwicmVxdWlyZUZhaWx1cmUiLCJzdHlsZSIsImNzc1Byb3BzIiwia2EiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImdlc3R1cmUiLCJkaXNwYXRjaEV2ZW50IiwibmEiLCJjcmVhdGVFbGVtZW50Iiwicm91bmQiLCJEYXRlIiwibm93IiwiYXNzaWduIiwiVHlwZUVycm9yIiwic2EiLCJrZXlzIiwidGEiLCJ2YSIsInRlc3QiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIk5hIiwiT2EiLCJQYSIsImRlc3Ryb3kiLCJTYSIsIm1vdXNlZG93biIsIm1vdXNlbW92ZSIsIm1vdXNldXAiLCJ0eXBlIiwiYnV0dG9uIiwid2hpY2giLCJwb2ludGVyVHlwZSIsIlZhIiwicG9pbnRlcmRvd24iLCJwb2ludGVybW92ZSIsInBvaW50ZXJ1cCIsInBvaW50ZXJjYW5jZWwiLCJwb2ludGVyb3V0IiwiV2EiLCJNU1BvaW50ZXJFdmVudCIsIlBvaW50ZXJFdmVudCIsInRvTG93ZXJDYXNlIiwicG9pbnRlcklkIiwiWmEiLCJ0b3VjaHN0YXJ0IiwidG91Y2htb3ZlIiwidG91Y2hlbmQiLCJ0b3VjaGNhbmNlbCIsImFiIiwic291cmNlQ2FwYWJpbGl0aWVzIiwiZmlyZXNUb3VjaEV2ZW50cyIsImViIiwiZ2IiLCJtYiIsImNvbXB1dGUiLCJhY3Rpb25zIiwidXBkYXRlIiwiZ2V0VG91Y2hBY3Rpb24iLCJqb2luIiwicHJldmVudERlZmF1bHRzIiwicHJldmVudGVkIiwicHJldmVudERlZmF1bHQiLCJwcmV2ZW50U3JjIiwicmIiLCJ0YiIsImRyb3BSZWNvZ25pemVXaXRoIiwiZHJvcFJlcXVpcmVGYWlsdXJlIiwiaGFzUmVxdWlyZUZhaWx1cmVzIiwiY2FuUmVjb2duaXplV2l0aCIsImV2ZW50IiwiYWRkaXRpb25hbEV2ZW50IiwidHJ5RW1pdCIsImNhbkVtaXQiLCJwcm9jZXNzIiwicmVzZXQiLCJhdHRyVGVzdCIsInRocmVzaG9sZCIsImRpcmVjdGlvblRlc3QiLCJ0aW1lIiwiY2xlYXJUaW1lb3V0IiwidGFwcyIsImludGVydmFsIiwicG9zVGhyZXNob2xkIiwiZmFpbFRpbWVvdXQiLCJ0YXBDb3VudCIsIlZFUlNJT04iLCJkb21FdmVudHMiLCJ1c2VyU2VsZWN0IiwidG91Y2hTZWxlY3QiLCJ0b3VjaENhbGxvdXQiLCJjb250ZW50Wm9vbWluZyIsInVzZXJEcmFnIiwidGFwSGlnaGxpZ2h0Q29sb3IiLCJ1YiIsInZiIiwic3RvcCIsInN0b3BwZWQiLCJjdXJSZWNvZ25pemVyIiwicmVtb3ZlIiwib24iLCJvZmYiLCJJTlBVVF9TVEFSVCIsIklOUFVUX01PVkUiLCJJTlBVVF9FTkQiLCJJTlBVVF9DQU5DRUwiLCJTVEFURV9QT1NTSUJMRSIsIlNUQVRFX0JFR0FOIiwiU1RBVEVfQ0hBTkdFRCIsIlNUQVRFX0VOREVEIiwiU1RBVEVfUkVDT0dOSVpFRCIsIlNUQVRFX0NBTkNFTExFRCIsIlNUQVRFX0ZBSUxFRCIsIkRJUkVDVElPTl9OT05FIiwiRElSRUNUSU9OX0xFRlQiLCJESVJFQ1RJT05fUklHSFQiLCJESVJFQ1RJT05fVVAiLCJESVJFQ1RJT05fRE9XTiIsIkRJUkVDVElPTl9IT1JJWk9OVEFMIiwiRElSRUNUSU9OX1ZFUlRJQ0FMIiwiRElSRUNUSU9OX0FMTCIsIk1hbmFnZXIiLCJJbnB1dCIsIlRvdWNoQWN0aW9uIiwiVG91Y2hJbnB1dCIsIk1vdXNlSW5wdXQiLCJQb2ludGVyRXZlbnRJbnB1dCIsIlRvdWNoTW91c2VJbnB1dCIsIlNpbmdsZVRvdWNoSW5wdXQiLCJSZWNvZ25pemVyIiwiQXR0clJlY29nbml6ZXIiLCJUYXAiLCJQYW4iLCJTd2lwZSIsIlBpbmNoIiwiUm90YXRlIiwiUHJlc3MiLCJlYWNoIiwibWVyZ2UiLCJleHRlbmQiLCJpbmhlcml0IiwiYmluZEZuIiwicHJlZml4ZWQiLCJ3YiIsInNlbGYiLCJIYW1tZXIi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QUFqbEIsRUFBbWxCcVgsVUFBU3hVLENBQTVsQixFQUFOLENBQXBtRCxDQUEwc0UsSUFBSXlVLEtBQUcsZUFBYSxPQUFPNVgsQ0FBcEIsR0FBc0JBLENBQXRCLEdBQXdCLGVBQWEsT0FBTzZYLElBQXBCLEdBQXlCQSxJQUF6QixHQUE4QixFQUE3RCxDQUFnRUQsR0FBR0UsTUFBSCxHQUFVakssRUFBVixFQUFhLGNBQVksT0FBT2tLLE1BQW5CLElBQTJCQSxPQUFPQyxHQUFsQyxHQUFzQ0QsT0FBTyxZQUFVO0FBQUMsV0FBT2xLLEVBQVA7QUFBVSxHQUE1QixDQUF0QyxHQUFvRSxlQUFhLE9BQU9vSyxNQUFwQixJQUE0QkEsT0FBT0MsT0FBbkMsR0FBMkNELE9BQU9DLE9BQVAsR0FBZXJLLEVBQTFELEdBQTZEN04sRUFBRUUsQ0FBRixJQUFLMk4sRUFBbko7QUFBc0osQ0FBemtvQixDQUEwa29Cc0ssTUFBMWtvQixFQUFpbG9CQyxRQUFqbG9CLEVBQTBsb0IsUUFBMWxvQixDQUFEO0FBQ0EiLCJmaWxlIjoiaGFtbWVyLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qISBIYW1tZXIuSlMgLSB2Mi4wLjcgLSAyMDE2LTA0LTIyXG4gKiBodHRwOi8vaGFtbWVyanMuZ2l0aHViLmlvL1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNiBKb3JpayBUYW5nZWxkZXI7XG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgKi9cbiFmdW5jdGlvbihhLGIsYyxkKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBlKGEsYixjKXtyZXR1cm4gc2V0VGltZW91dChqKGEsYyksYil9ZnVuY3Rpb24gZihhLGIsYyl7cmV0dXJuIEFycmF5LmlzQXJyYXkoYSk/KGcoYSxjW2JdLGMpLCEwKTohMX1mdW5jdGlvbiBnKGEsYixjKXt2YXIgZTtpZihhKWlmKGEuZm9yRWFjaClhLmZvckVhY2goYixjKTtlbHNlIGlmKGEubGVuZ3RoIT09ZClmb3IoZT0wO2U8YS5sZW5ndGg7KWIuY2FsbChjLGFbZV0sZSxhKSxlKys7ZWxzZSBmb3IoZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJmIuY2FsbChjLGFbZV0sZSxhKX1mdW5jdGlvbiBoKGIsYyxkKXt2YXIgZT1cIkRFUFJFQ0FURUQgTUVUSE9EOiBcIitjK1wiXFxuXCIrZCtcIiBBVCBcXG5cIjtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1uZXcgRXJyb3IoXCJnZXQtc3RhY2stdHJhY2VcIiksZD1jJiZjLnN0YWNrP2Muc3RhY2sucmVwbGFjZSgvXlteXFwoXSs/W1xcbiRdL2dtLFwiXCIpLnJlcGxhY2UoL15cXHMrYXRcXHMrL2dtLFwiXCIpLnJlcGxhY2UoL15PYmplY3QuPGFub255bW91cz5cXHMqXFwoL2dtLFwie2Fub255bW91c30oKUBcIik6XCJVbmtub3duIFN0YWNrIFRyYWNlXCIsZj1hLmNvbnNvbGUmJihhLmNvbnNvbGUud2Fybnx8YS5jb25zb2xlLmxvZyk7cmV0dXJuIGYmJmYuY2FsbChhLmNvbnNvbGUsZSxkKSxiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19ZnVuY3Rpb24gaShhLGIsYyl7dmFyIGQsZT1iLnByb3RvdHlwZTtkPWEucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSksZC5jb25zdHJ1Y3Rvcj1hLGQuX3N1cGVyPWUsYyYmbGEoZCxjKX1mdW5jdGlvbiBqKGEsYil7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGEuYXBwbHkoYixhcmd1bWVudHMpfX1mdW5jdGlvbiBrKGEsYil7cmV0dXJuIHR5cGVvZiBhPT1vYT9hLmFwcGx5KGI/YlswXXx8ZDpkLGIpOmF9ZnVuY3Rpb24gbChhLGIpe3JldHVybiBhPT09ZD9iOmF9ZnVuY3Rpb24gbShhLGIsYyl7ZyhxKGIpLGZ1bmN0aW9uKGIpe2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfSl9ZnVuY3Rpb24gbihhLGIsYyl7ZyhxKGIpLGZ1bmN0aW9uKGIpe2EucmVtb3ZlRXZlbnRMaXN0ZW5lcihiLGMsITEpfSl9ZnVuY3Rpb24gbyhhLGIpe2Zvcig7YTspe2lmKGE9PWIpcmV0dXJuITA7YT1hLnBhcmVudE5vZGV9cmV0dXJuITF9ZnVuY3Rpb24gcChhLGIpe3JldHVybiBhLmluZGV4T2YoYik+LTF9ZnVuY3Rpb24gcShhKXtyZXR1cm4gYS50cmltKCkuc3BsaXQoL1xccysvZyl9ZnVuY3Rpb24gcihhLGIsYyl7aWYoYS5pbmRleE9mJiYhYylyZXR1cm4gYS5pbmRleE9mKGIpO2Zvcih2YXIgZD0wO2Q8YS5sZW5ndGg7KXtpZihjJiZhW2RdW2NdPT1ifHwhYyYmYVtkXT09PWIpcmV0dXJuIGQ7ZCsrfXJldHVybi0xfWZ1bmN0aW9uIHMoYSl7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEsMCl9ZnVuY3Rpb24gdChhLGIsYyl7Zm9yKHZhciBkPVtdLGU9W10sZj0wO2Y8YS5sZW5ndGg7KXt2YXIgZz1iP2FbZl1bYl06YVtmXTtyKGUsZyk8MCYmZC5wdXNoKGFbZl0pLGVbZl09ZyxmKyt9cmV0dXJuIGMmJihkPWI/ZC5zb3J0KGZ1bmN0aW9uKGEsYyl7cmV0dXJuIGFbYl0+Y1tiXX0pOmQuc29ydCgpKSxkfWZ1bmN0aW9uIHUoYSxiKXtmb3IodmFyIGMsZSxmPWJbMF0udG9VcHBlckNhc2UoKStiLnNsaWNlKDEpLGc9MDtnPG1hLmxlbmd0aDspe2lmKGM9bWFbZ10sZT1jP2MrZjpiLGUgaW4gYSlyZXR1cm4gZTtnKyt9cmV0dXJuIGR9ZnVuY3Rpb24gdigpe3JldHVybiB1YSsrfWZ1bmN0aW9uIHcoYil7dmFyIGM9Yi5vd25lckRvY3VtZW50fHxiO3JldHVybiBjLmRlZmF1bHRWaWV3fHxjLnBhcmVudFdpbmRvd3x8YX1mdW5jdGlvbiB4KGEsYil7dmFyIGM9dGhpczt0aGlzLm1hbmFnZXI9YSx0aGlzLmNhbGxiYWNrPWIsdGhpcy5lbGVtZW50PWEuZWxlbWVudCx0aGlzLnRhcmdldD1hLm9wdGlvbnMuaW5wdXRUYXJnZXQsdGhpcy5kb21IYW5kbGVyPWZ1bmN0aW9uKGIpe2soYS5vcHRpb25zLmVuYWJsZSxbYV0pJiZjLmhhbmRsZXIoYil9LHRoaXMuaW5pdCgpfWZ1bmN0aW9uIHkoYSl7dmFyIGIsYz1hLm9wdGlvbnMuaW5wdXRDbGFzcztyZXR1cm4gbmV3KGI9Yz9jOnhhP006eWE/UDp3YT9SOkwpKGEseil9ZnVuY3Rpb24geihhLGIsYyl7dmFyIGQ9Yy5wb2ludGVycy5sZW5ndGgsZT1jLmNoYW5nZWRQb2ludGVycy5sZW5ndGgsZj1iJkVhJiZkLWU9PT0wLGc9YiYoR2F8SGEpJiZkLWU9PT0wO2MuaXNGaXJzdD0hIWYsYy5pc0ZpbmFsPSEhZyxmJiYoYS5zZXNzaW9uPXt9KSxjLmV2ZW50VHlwZT1iLEEoYSxjKSxhLmVtaXQoXCJoYW1tZXIuaW5wdXRcIixjKSxhLnJlY29nbml6ZShjKSxhLnNlc3Npb24ucHJldklucHV0PWN9ZnVuY3Rpb24gQShhLGIpe3ZhciBjPWEuc2Vzc2lvbixkPWIucG9pbnRlcnMsZT1kLmxlbmd0aDtjLmZpcnN0SW5wdXR8fChjLmZpcnN0SW5wdXQ9RChiKSksZT4xJiYhYy5maXJzdE11bHRpcGxlP2MuZmlyc3RNdWx0aXBsZT1EKGIpOjE9PT1lJiYoYy5maXJzdE11bHRpcGxlPSExKTt2YXIgZj1jLmZpcnN0SW5wdXQsZz1jLmZpcnN0TXVsdGlwbGUsaD1nP2cuY2VudGVyOmYuY2VudGVyLGk9Yi5jZW50ZXI9RShkKTtiLnRpbWVTdGFtcD1yYSgpLGIuZGVsdGFUaW1lPWIudGltZVN0YW1wLWYudGltZVN0YW1wLGIuYW5nbGU9SShoLGkpLGIuZGlzdGFuY2U9SChoLGkpLEIoYyxiKSxiLm9mZnNldERpcmVjdGlvbj1HKGIuZGVsdGFYLGIuZGVsdGFZKTt2YXIgaj1GKGIuZGVsdGFUaW1lLGIuZGVsdGFYLGIuZGVsdGFZKTtiLm92ZXJhbGxWZWxvY2l0eVg9ai54LGIub3ZlcmFsbFZlbG9jaXR5WT1qLnksYi5vdmVyYWxsVmVsb2NpdHk9cWEoai54KT5xYShqLnkpP2oueDpqLnksYi5zY2FsZT1nP0soZy5wb2ludGVycyxkKToxLGIucm90YXRpb249Zz9KKGcucG9pbnRlcnMsZCk6MCxiLm1heFBvaW50ZXJzPWMucHJldklucHV0P2IucG9pbnRlcnMubGVuZ3RoPmMucHJldklucHV0Lm1heFBvaW50ZXJzP2IucG9pbnRlcnMubGVuZ3RoOmMucHJldklucHV0Lm1heFBvaW50ZXJzOmIucG9pbnRlcnMubGVuZ3RoLEMoYyxiKTt2YXIgaz1hLmVsZW1lbnQ7byhiLnNyY0V2ZW50LnRhcmdldCxrKSYmKGs9Yi5zcmNFdmVudC50YXJnZXQpLGIudGFyZ2V0PWt9ZnVuY3Rpb24gQihhLGIpe3ZhciBjPWIuY2VudGVyLGQ9YS5vZmZzZXREZWx0YXx8e30sZT1hLnByZXZEZWx0YXx8e30sZj1hLnByZXZJbnB1dHx8e307Yi5ldmVudFR5cGUhPT1FYSYmZi5ldmVudFR5cGUhPT1HYXx8KGU9YS5wcmV2RGVsdGE9e3g6Zi5kZWx0YVh8fDAseTpmLmRlbHRhWXx8MH0sZD1hLm9mZnNldERlbHRhPXt4OmMueCx5OmMueX0pLGIuZGVsdGFYPWUueCsoYy54LWQueCksYi5kZWx0YVk9ZS55KyhjLnktZC55KX1mdW5jdGlvbiBDKGEsYil7dmFyIGMsZSxmLGcsaD1hLmxhc3RJbnRlcnZhbHx8YixpPWIudGltZVN0YW1wLWgudGltZVN0YW1wO2lmKGIuZXZlbnRUeXBlIT1IYSYmKGk+RGF8fGgudmVsb2NpdHk9PT1kKSl7dmFyIGo9Yi5kZWx0YVgtaC5kZWx0YVgsaz1iLmRlbHRhWS1oLmRlbHRhWSxsPUYoaSxqLGspO2U9bC54LGY9bC55LGM9cWEobC54KT5xYShsLnkpP2wueDpsLnksZz1HKGosayksYS5sYXN0SW50ZXJ2YWw9Yn1lbHNlIGM9aC52ZWxvY2l0eSxlPWgudmVsb2NpdHlYLGY9aC52ZWxvY2l0eVksZz1oLmRpcmVjdGlvbjtiLnZlbG9jaXR5PWMsYi52ZWxvY2l0eVg9ZSxiLnZlbG9jaXR5WT1mLGIuZGlyZWN0aW9uPWd9ZnVuY3Rpb24gRChhKXtmb3IodmFyIGI9W10sYz0wO2M8YS5wb2ludGVycy5sZW5ndGg7KWJbY109e2NsaWVudFg6cGEoYS5wb2ludGVyc1tjXS5jbGllbnRYKSxjbGllbnRZOnBhKGEucG9pbnRlcnNbY10uY2xpZW50WSl9LGMrKztyZXR1cm57dGltZVN0YW1wOnJhKCkscG9pbnRlcnM6YixjZW50ZXI6RShiKSxkZWx0YVg6YS5kZWx0YVgsZGVsdGFZOmEuZGVsdGFZfX1mdW5jdGlvbiBFKGEpe3ZhciBiPWEubGVuZ3RoO2lmKDE9PT1iKXJldHVybnt4OnBhKGFbMF0uY2xpZW50WCkseTpwYShhWzBdLmNsaWVudFkpfTtmb3IodmFyIGM9MCxkPTAsZT0wO2I+ZTspYys9YVtlXS5jbGllbnRYLGQrPWFbZV0uY2xpZW50WSxlKys7cmV0dXJue3g6cGEoYy9iKSx5OnBhKGQvYil9fWZ1bmN0aW9uIEYoYSxiLGMpe3JldHVybnt4OmIvYXx8MCx5OmMvYXx8MH19ZnVuY3Rpb24gRyhhLGIpe3JldHVybiBhPT09Yj9JYTpxYShhKT49cWEoYik/MD5hP0phOkthOjA+Yj9MYTpNYX1mdW5jdGlvbiBIKGEsYixjKXtjfHwoYz1RYSk7dmFyIGQ9YltjWzBdXS1hW2NbMF1dLGU9YltjWzFdXS1hW2NbMV1dO3JldHVybiBNYXRoLnNxcnQoZCpkK2UqZSl9ZnVuY3Rpb24gSShhLGIsYyl7Y3x8KGM9UWEpO3ZhciBkPWJbY1swXV0tYVtjWzBdXSxlPWJbY1sxXV0tYVtjWzFdXTtyZXR1cm4gMTgwKk1hdGguYXRhbjIoZSxkKS9NYXRoLlBJfWZ1bmN0aW9uIEooYSxiKXtyZXR1cm4gSShiWzFdLGJbMF0sUmEpK0koYVsxXSxhWzBdLFJhKX1mdW5jdGlvbiBLKGEsYil7cmV0dXJuIEgoYlswXSxiWzFdLFJhKS9IKGFbMF0sYVsxXSxSYSl9ZnVuY3Rpb24gTCgpe3RoaXMuZXZFbD1UYSx0aGlzLmV2V2luPVVhLHRoaXMucHJlc3NlZD0hMSx4LmFwcGx5KHRoaXMsYXJndW1lbnRzKX1mdW5jdGlvbiBNKCl7dGhpcy5ldkVsPVhhLHRoaXMuZXZXaW49WWEseC5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5zdG9yZT10aGlzLm1hbmFnZXIuc2Vzc2lvbi5wb2ludGVyRXZlbnRzPVtdfWZ1bmN0aW9uIE4oKXt0aGlzLmV2VGFyZ2V0PSRhLHRoaXMuZXZXaW49X2EsdGhpcy5zdGFydGVkPSExLHguYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIE8oYSxiKXt2YXIgYz1zKGEudG91Y2hlcyksZD1zKGEuY2hhbmdlZFRvdWNoZXMpO3JldHVybiBiJihHYXxIYSkmJihjPXQoYy5jb25jYXQoZCksXCJpZGVudGlmaWVyXCIsITApKSxbYyxkXX1mdW5jdGlvbiBQKCl7dGhpcy5ldlRhcmdldD1iYix0aGlzLnRhcmdldElkcz17fSx4LmFwcGx5KHRoaXMsYXJndW1lbnRzKX1mdW5jdGlvbiBRKGEsYil7dmFyIGM9cyhhLnRvdWNoZXMpLGQ9dGhpcy50YXJnZXRJZHM7aWYoYiYoRWF8RmEpJiYxPT09Yy5sZW5ndGgpcmV0dXJuIGRbY1swXS5pZGVudGlmaWVyXT0hMCxbYyxjXTt2YXIgZSxmLGc9cyhhLmNoYW5nZWRUb3VjaGVzKSxoPVtdLGk9dGhpcy50YXJnZXQ7aWYoZj1jLmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm4gbyhhLnRhcmdldCxpKX0pLGI9PT1FYSlmb3IoZT0wO2U8Zi5sZW5ndGg7KWRbZltlXS5pZGVudGlmaWVyXT0hMCxlKys7Zm9yKGU9MDtlPGcubGVuZ3RoOylkW2dbZV0uaWRlbnRpZmllcl0mJmgucHVzaChnW2VdKSxiJihHYXxIYSkmJmRlbGV0ZSBkW2dbZV0uaWRlbnRpZmllcl0sZSsrO3JldHVybiBoLmxlbmd0aD9bdChmLmNvbmNhdChoKSxcImlkZW50aWZpZXJcIiwhMCksaF06dm9pZCAwfWZ1bmN0aW9uIFIoKXt4LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt2YXIgYT1qKHRoaXMuaGFuZGxlcix0aGlzKTt0aGlzLnRvdWNoPW5ldyBQKHRoaXMubWFuYWdlcixhKSx0aGlzLm1vdXNlPW5ldyBMKHRoaXMubWFuYWdlcixhKSx0aGlzLnByaW1hcnlUb3VjaD1udWxsLHRoaXMubGFzdFRvdWNoZXM9W119ZnVuY3Rpb24gUyhhLGIpe2EmRWE/KHRoaXMucHJpbWFyeVRvdWNoPWIuY2hhbmdlZFBvaW50ZXJzWzBdLmlkZW50aWZpZXIsVC5jYWxsKHRoaXMsYikpOmEmKEdhfEhhKSYmVC5jYWxsKHRoaXMsYil9ZnVuY3Rpb24gVChhKXt2YXIgYj1hLmNoYW5nZWRQb2ludGVyc1swXTtpZihiLmlkZW50aWZpZXI9PT10aGlzLnByaW1hcnlUb3VjaCl7dmFyIGM9e3g6Yi5jbGllbnRYLHk6Yi5jbGllbnRZfTt0aGlzLmxhc3RUb3VjaGVzLnB1c2goYyk7dmFyIGQ9dGhpcy5sYXN0VG91Y2hlcyxlPWZ1bmN0aW9uKCl7dmFyIGE9ZC5pbmRleE9mKGMpO2E+LTEmJmQuc3BsaWNlKGEsMSl9O3NldFRpbWVvdXQoZSxjYil9fWZ1bmN0aW9uIFUoYSl7Zm9yKHZhciBiPWEuc3JjRXZlbnQuY2xpZW50WCxjPWEuc3JjRXZlbnQuY2xpZW50WSxkPTA7ZDx0aGlzLmxhc3RUb3VjaGVzLmxlbmd0aDtkKyspe3ZhciBlPXRoaXMubGFzdFRvdWNoZXNbZF0sZj1NYXRoLmFicyhiLWUueCksZz1NYXRoLmFicyhjLWUueSk7aWYoZGI+PWYmJmRiPj1nKXJldHVybiEwfXJldHVybiExfWZ1bmN0aW9uIFYoYSxiKXt0aGlzLm1hbmFnZXI9YSx0aGlzLnNldChiKX1mdW5jdGlvbiBXKGEpe2lmKHAoYSxqYikpcmV0dXJuIGpiO3ZhciBiPXAoYSxrYiksYz1wKGEsbGIpO3JldHVybiBiJiZjP2piOmJ8fGM/Yj9rYjpsYjpwKGEsaWIpP2liOmhifWZ1bmN0aW9uIFgoKXtpZighZmIpcmV0dXJuITE7dmFyIGI9e30sYz1hLkNTUyYmYS5DU1Muc3VwcG9ydHM7cmV0dXJuW1wiYXV0b1wiLFwibWFuaXB1bGF0aW9uXCIsXCJwYW4teVwiLFwicGFuLXhcIixcInBhbi14IHBhbi15XCIsXCJub25lXCJdLmZvckVhY2goZnVuY3Rpb24oZCl7YltkXT1jP2EuQ1NTLnN1cHBvcnRzKFwidG91Y2gtYWN0aW9uXCIsZCk6ITB9KSxifWZ1bmN0aW9uIFkoYSl7dGhpcy5vcHRpb25zPWxhKHt9LHRoaXMuZGVmYXVsdHMsYXx8e30pLHRoaXMuaWQ9digpLHRoaXMubWFuYWdlcj1udWxsLHRoaXMub3B0aW9ucy5lbmFibGU9bCh0aGlzLm9wdGlvbnMuZW5hYmxlLCEwKSx0aGlzLnN0YXRlPW5iLHRoaXMuc2ltdWx0YW5lb3VzPXt9LHRoaXMucmVxdWlyZUZhaWw9W119ZnVuY3Rpb24gWihhKXtyZXR1cm4gYSZzYj9cImNhbmNlbFwiOmEmcWI/XCJlbmRcIjphJnBiP1wibW92ZVwiOmEmb2I/XCJzdGFydFwiOlwiXCJ9ZnVuY3Rpb24gJChhKXtyZXR1cm4gYT09TWE/XCJkb3duXCI6YT09TGE/XCJ1cFwiOmE9PUphP1wibGVmdFwiOmE9PUthP1wicmlnaHRcIjpcIlwifWZ1bmN0aW9uIF8oYSxiKXt2YXIgYz1iLm1hbmFnZXI7cmV0dXJuIGM/Yy5nZXQoYSk6YX1mdW5jdGlvbiBhYSgpe1kuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIGJhKCl7YWEuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMucFg9bnVsbCx0aGlzLnBZPW51bGx9ZnVuY3Rpb24gY2EoKXthYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZnVuY3Rpb24gZGEoKXtZLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLl90aW1lcj1udWxsLHRoaXMuX2lucHV0PW51bGx9ZnVuY3Rpb24gZWEoKXthYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZnVuY3Rpb24gZmEoKXthYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZnVuY3Rpb24gZ2EoKXtZLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLnBUaW1lPSExLHRoaXMucENlbnRlcj0hMSx0aGlzLl90aW1lcj1udWxsLHRoaXMuX2lucHV0PW51bGwsdGhpcy5jb3VudD0wfWZ1bmN0aW9uIGhhKGEsYil7cmV0dXJuIGI9Ynx8e30sYi5yZWNvZ25pemVycz1sKGIucmVjb2duaXplcnMsaGEuZGVmYXVsdHMucHJlc2V0KSxuZXcgaWEoYSxiKX1mdW5jdGlvbiBpYShhLGIpe3RoaXMub3B0aW9ucz1sYSh7fSxoYS5kZWZhdWx0cyxifHx7fSksdGhpcy5vcHRpb25zLmlucHV0VGFyZ2V0PXRoaXMub3B0aW9ucy5pbnB1dFRhcmdldHx8YSx0aGlzLmhhbmRsZXJzPXt9LHRoaXMuc2Vzc2lvbj17fSx0aGlzLnJlY29nbml6ZXJzPVtdLHRoaXMub2xkQ3NzUHJvcHM9e30sdGhpcy5lbGVtZW50PWEsdGhpcy5pbnB1dD15KHRoaXMpLHRoaXMudG91Y2hBY3Rpb249bmV3IFYodGhpcyx0aGlzLm9wdGlvbnMudG91Y2hBY3Rpb24pLGphKHRoaXMsITApLGcodGhpcy5vcHRpb25zLnJlY29nbml6ZXJzLGZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuYWRkKG5ldyBhWzBdKGFbMV0pKTthWzJdJiZiLnJlY29nbml6ZVdpdGgoYVsyXSksYVszXSYmYi5yZXF1aXJlRmFpbHVyZShhWzNdKX0sdGhpcyl9ZnVuY3Rpb24gamEoYSxiKXt2YXIgYz1hLmVsZW1lbnQ7aWYoYy5zdHlsZSl7dmFyIGQ7ZyhhLm9wdGlvbnMuY3NzUHJvcHMsZnVuY3Rpb24oZSxmKXtkPXUoYy5zdHlsZSxmKSxiPyhhLm9sZENzc1Byb3BzW2RdPWMuc3R5bGVbZF0sYy5zdHlsZVtkXT1lKTpjLnN0eWxlW2RdPWEub2xkQ3NzUHJvcHNbZF18fFwiXCJ9KSxifHwoYS5vbGRDc3NQcm9wcz17fSl9fWZ1bmN0aW9uIGthKGEsYyl7dmFyIGQ9Yi5jcmVhdGVFdmVudChcIkV2ZW50XCIpO2QuaW5pdEV2ZW50KGEsITAsITApLGQuZ2VzdHVyZT1jLGMudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZCl9dmFyIGxhLG1hPVtcIlwiLFwid2Via2l0XCIsXCJNb3pcIixcIk1TXCIsXCJtc1wiLFwib1wiXSxuYT1iLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksb2E9XCJmdW5jdGlvblwiLHBhPU1hdGgucm91bmQscWE9TWF0aC5hYnMscmE9RGF0ZS5ub3c7bGE9XCJmdW5jdGlvblwiIT10eXBlb2YgT2JqZWN0LmFzc2lnbj9mdW5jdGlvbihhKXtpZihhPT09ZHx8bnVsbD09PWEpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdFwiKTtmb3IodmFyIGI9T2JqZWN0KGEpLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKXt2YXIgZT1hcmd1bWVudHNbY107aWYoZSE9PWQmJm51bGwhPT1lKWZvcih2YXIgZiBpbiBlKWUuaGFzT3duUHJvcGVydHkoZikmJihiW2ZdPWVbZl0pfXJldHVybiBifTpPYmplY3QuYXNzaWduO3ZhciBzYT1oKGZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGU9T2JqZWN0LmtleXMoYiksZj0wO2Y8ZS5sZW5ndGg7KSghY3x8YyYmYVtlW2ZdXT09PWQpJiYoYVtlW2ZdXT1iW2VbZl1dKSxmKys7cmV0dXJuIGF9LFwiZXh0ZW5kXCIsXCJVc2UgYGFzc2lnbmAuXCIpLHRhPWgoZnVuY3Rpb24oYSxiKXtyZXR1cm4gc2EoYSxiLCEwKX0sXCJtZXJnZVwiLFwiVXNlIGBhc3NpZ25gLlwiKSx1YT0xLHZhPS9tb2JpbGV8dGFibGV0fGlwKGFkfGhvbmV8b2QpfGFuZHJvaWQvaSx3YT1cIm9udG91Y2hzdGFydFwiaW4gYSx4YT11KGEsXCJQb2ludGVyRXZlbnRcIikhPT1kLHlhPXdhJiZ2YS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLHphPVwidG91Y2hcIixBYT1cInBlblwiLEJhPVwibW91c2VcIixDYT1cImtpbmVjdFwiLERhPTI1LEVhPTEsRmE9MixHYT00LEhhPTgsSWE9MSxKYT0yLEthPTQsTGE9OCxNYT0xNixOYT1KYXxLYSxPYT1MYXxNYSxQYT1OYXxPYSxRYT1bXCJ4XCIsXCJ5XCJdLFJhPVtcImNsaWVudFhcIixcImNsaWVudFlcIl07eC5wcm90b3R5cGU9e2hhbmRsZXI6ZnVuY3Rpb24oKXt9LGluaXQ6ZnVuY3Rpb24oKXt0aGlzLmV2RWwmJm0odGhpcy5lbGVtZW50LHRoaXMuZXZFbCx0aGlzLmRvbUhhbmRsZXIpLHRoaXMuZXZUYXJnZXQmJm0odGhpcy50YXJnZXQsdGhpcy5ldlRhcmdldCx0aGlzLmRvbUhhbmRsZXIpLHRoaXMuZXZXaW4mJm0odyh0aGlzLmVsZW1lbnQpLHRoaXMuZXZXaW4sdGhpcy5kb21IYW5kbGVyKX0sZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuZXZFbCYmbih0aGlzLmVsZW1lbnQsdGhpcy5ldkVsLHRoaXMuZG9tSGFuZGxlciksdGhpcy5ldlRhcmdldCYmbih0aGlzLnRhcmdldCx0aGlzLmV2VGFyZ2V0LHRoaXMuZG9tSGFuZGxlciksdGhpcy5ldldpbiYmbih3KHRoaXMuZWxlbWVudCksdGhpcy5ldldpbix0aGlzLmRvbUhhbmRsZXIpfX07dmFyIFNhPXttb3VzZWRvd246RWEsbW91c2Vtb3ZlOkZhLG1vdXNldXA6R2F9LFRhPVwibW91c2Vkb3duXCIsVWE9XCJtb3VzZW1vdmUgbW91c2V1cFwiO2koTCx4LHtoYW5kbGVyOmZ1bmN0aW9uKGEpe3ZhciBiPVNhW2EudHlwZV07YiZFYSYmMD09PWEuYnV0dG9uJiYodGhpcy5wcmVzc2VkPSEwKSxiJkZhJiYxIT09YS53aGljaCYmKGI9R2EpLHRoaXMucHJlc3NlZCYmKGImR2EmJih0aGlzLnByZXNzZWQ9ITEpLHRoaXMuY2FsbGJhY2sodGhpcy5tYW5hZ2VyLGIse3BvaW50ZXJzOlthXSxjaGFuZ2VkUG9pbnRlcnM6W2FdLHBvaW50ZXJUeXBlOkJhLHNyY0V2ZW50OmF9KSl9fSk7dmFyIFZhPXtwb2ludGVyZG93bjpFYSxwb2ludGVybW92ZTpGYSxwb2ludGVydXA6R2EscG9pbnRlcmNhbmNlbDpIYSxwb2ludGVyb3V0OkhhfSxXYT17Mjp6YSwzOkFhLDQ6QmEsNTpDYX0sWGE9XCJwb2ludGVyZG93blwiLFlhPVwicG9pbnRlcm1vdmUgcG9pbnRlcnVwIHBvaW50ZXJjYW5jZWxcIjthLk1TUG9pbnRlckV2ZW50JiYhYS5Qb2ludGVyRXZlbnQmJihYYT1cIk1TUG9pbnRlckRvd25cIixZYT1cIk1TUG9pbnRlck1vdmUgTVNQb2ludGVyVXAgTVNQb2ludGVyQ2FuY2VsXCIpLGkoTSx4LHtoYW5kbGVyOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuc3RvcmUsYz0hMSxkPWEudHlwZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoXCJtc1wiLFwiXCIpLGU9VmFbZF0sZj1XYVthLnBvaW50ZXJUeXBlXXx8YS5wb2ludGVyVHlwZSxnPWY9PXphLGg9cihiLGEucG9pbnRlcklkLFwicG9pbnRlcklkXCIpO2UmRWEmJigwPT09YS5idXR0b258fGcpPzA+aCYmKGIucHVzaChhKSxoPWIubGVuZ3RoLTEpOmUmKEdhfEhhKSYmKGM9ITApLDA+aHx8KGJbaF09YSx0aGlzLmNhbGxiYWNrKHRoaXMubWFuYWdlcixlLHtwb2ludGVyczpiLGNoYW5nZWRQb2ludGVyczpbYV0scG9pbnRlclR5cGU6ZixzcmNFdmVudDphfSksYyYmYi5zcGxpY2UoaCwxKSl9fSk7dmFyIFphPXt0b3VjaHN0YXJ0OkVhLHRvdWNobW92ZTpGYSx0b3VjaGVuZDpHYSx0b3VjaGNhbmNlbDpIYX0sJGE9XCJ0b3VjaHN0YXJ0XCIsX2E9XCJ0b3VjaHN0YXJ0IHRvdWNobW92ZSB0b3VjaGVuZCB0b3VjaGNhbmNlbFwiO2koTix4LHtoYW5kbGVyOmZ1bmN0aW9uKGEpe3ZhciBiPVphW2EudHlwZV07aWYoYj09PUVhJiYodGhpcy5zdGFydGVkPSEwKSx0aGlzLnN0YXJ0ZWQpe3ZhciBjPU8uY2FsbCh0aGlzLGEsYik7YiYoR2F8SGEpJiZjWzBdLmxlbmd0aC1jWzFdLmxlbmd0aD09PTAmJih0aGlzLnN0YXJ0ZWQ9ITEpLHRoaXMuY2FsbGJhY2sodGhpcy5tYW5hZ2VyLGIse3BvaW50ZXJzOmNbMF0sY2hhbmdlZFBvaW50ZXJzOmNbMV0scG9pbnRlclR5cGU6emEsc3JjRXZlbnQ6YX0pfX19KTt2YXIgYWI9e3RvdWNoc3RhcnQ6RWEsdG91Y2htb3ZlOkZhLHRvdWNoZW5kOkdhLHRvdWNoY2FuY2VsOkhhfSxiYj1cInRvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsXCI7aShQLHgse2hhbmRsZXI6ZnVuY3Rpb24oYSl7dmFyIGI9YWJbYS50eXBlXSxjPVEuY2FsbCh0aGlzLGEsYik7YyYmdGhpcy5jYWxsYmFjayh0aGlzLm1hbmFnZXIsYix7cG9pbnRlcnM6Y1swXSxjaGFuZ2VkUG9pbnRlcnM6Y1sxXSxwb2ludGVyVHlwZTp6YSxzcmNFdmVudDphfSl9fSk7dmFyIGNiPTI1MDAsZGI9MjU7aShSLHgse2hhbmRsZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWMucG9pbnRlclR5cGU9PXphLGU9Yy5wb2ludGVyVHlwZT09QmE7aWYoIShlJiZjLnNvdXJjZUNhcGFiaWxpdGllcyYmYy5zb3VyY2VDYXBhYmlsaXRpZXMuZmlyZXNUb3VjaEV2ZW50cykpe2lmKGQpUy5jYWxsKHRoaXMsYixjKTtlbHNlIGlmKGUmJlUuY2FsbCh0aGlzLGMpKXJldHVybjt0aGlzLmNhbGxiYWNrKGEsYixjKX19LGRlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLnRvdWNoLmRlc3Ryb3koKSx0aGlzLm1vdXNlLmRlc3Ryb3koKX19KTt2YXIgZWI9dShuYS5zdHlsZSxcInRvdWNoQWN0aW9uXCIpLGZiPWViIT09ZCxnYj1cImNvbXB1dGVcIixoYj1cImF1dG9cIixpYj1cIm1hbmlwdWxhdGlvblwiLGpiPVwibm9uZVwiLGtiPVwicGFuLXhcIixsYj1cInBhbi15XCIsbWI9WCgpO1YucHJvdG90eXBlPXtzZXQ6ZnVuY3Rpb24oYSl7YT09Z2ImJihhPXRoaXMuY29tcHV0ZSgpKSxmYiYmdGhpcy5tYW5hZ2VyLmVsZW1lbnQuc3R5bGUmJm1iW2FdJiYodGhpcy5tYW5hZ2VyLmVsZW1lbnQuc3R5bGVbZWJdPWEpLHRoaXMuYWN0aW9ucz1hLnRvTG93ZXJDYXNlKCkudHJpbSgpfSx1cGRhdGU6ZnVuY3Rpb24oKXt0aGlzLnNldCh0aGlzLm1hbmFnZXIub3B0aW9ucy50b3VjaEFjdGlvbil9LGNvbXB1dGU6ZnVuY3Rpb24oKXt2YXIgYT1bXTtyZXR1cm4gZyh0aGlzLm1hbmFnZXIucmVjb2duaXplcnMsZnVuY3Rpb24oYil7ayhiLm9wdGlvbnMuZW5hYmxlLFtiXSkmJihhPWEuY29uY2F0KGIuZ2V0VG91Y2hBY3Rpb24oKSkpfSksVyhhLmpvaW4oXCIgXCIpKX0scHJldmVudERlZmF1bHRzOmZ1bmN0aW9uKGEpe3ZhciBiPWEuc3JjRXZlbnQsYz1hLm9mZnNldERpcmVjdGlvbjtpZih0aGlzLm1hbmFnZXIuc2Vzc2lvbi5wcmV2ZW50ZWQpcmV0dXJuIHZvaWQgYi5wcmV2ZW50RGVmYXVsdCgpO3ZhciBkPXRoaXMuYWN0aW9ucyxlPXAoZCxqYikmJiFtYltqYl0sZj1wKGQsbGIpJiYhbWJbbGJdLGc9cChkLGtiKSYmIW1iW2tiXTtpZihlKXt2YXIgaD0xPT09YS5wb2ludGVycy5sZW5ndGgsaT1hLmRpc3RhbmNlPDIsaj1hLmRlbHRhVGltZTwyNTA7aWYoaCYmaSYmailyZXR1cm59cmV0dXJuIGcmJmY/dm9pZCAwOmV8fGYmJmMmTmF8fGcmJmMmT2E/dGhpcy5wcmV2ZW50U3JjKGIpOnZvaWQgMH0scHJldmVudFNyYzpmdW5jdGlvbihhKXt0aGlzLm1hbmFnZXIuc2Vzc2lvbi5wcmV2ZW50ZWQ9ITAsYS5wcmV2ZW50RGVmYXVsdCgpfX07dmFyIG5iPTEsb2I9MixwYj00LHFiPTgscmI9cWIsc2I9MTYsdGI9MzI7WS5wcm90b3R5cGU9e2RlZmF1bHRzOnt9LHNldDpmdW5jdGlvbihhKXtyZXR1cm4gbGEodGhpcy5vcHRpb25zLGEpLHRoaXMubWFuYWdlciYmdGhpcy5tYW5hZ2VyLnRvdWNoQWN0aW9uLnVwZGF0ZSgpLHRoaXN9LHJlY29nbml6ZVdpdGg6ZnVuY3Rpb24oYSl7aWYoZihhLFwicmVjb2duaXplV2l0aFwiLHRoaXMpKXJldHVybiB0aGlzO3ZhciBiPXRoaXMuc2ltdWx0YW5lb3VzO3JldHVybiBhPV8oYSx0aGlzKSxiW2EuaWRdfHwoYlthLmlkXT1hLGEucmVjb2duaXplV2l0aCh0aGlzKSksdGhpc30sZHJvcFJlY29nbml6ZVdpdGg6ZnVuY3Rpb24oYSl7cmV0dXJuIGYoYSxcImRyb3BSZWNvZ25pemVXaXRoXCIsdGhpcyk/dGhpczooYT1fKGEsdGhpcyksZGVsZXRlIHRoaXMuc2ltdWx0YW5lb3VzW2EuaWRdLHRoaXMpfSxyZXF1aXJlRmFpbHVyZTpmdW5jdGlvbihhKXtpZihmKGEsXCJyZXF1aXJlRmFpbHVyZVwiLHRoaXMpKXJldHVybiB0aGlzO3ZhciBiPXRoaXMucmVxdWlyZUZhaWw7cmV0dXJuIGE9XyhhLHRoaXMpLC0xPT09cihiLGEpJiYoYi5wdXNoKGEpLGEucmVxdWlyZUZhaWx1cmUodGhpcykpLHRoaXN9LGRyb3BSZXF1aXJlRmFpbHVyZTpmdW5jdGlvbihhKXtpZihmKGEsXCJkcm9wUmVxdWlyZUZhaWx1cmVcIix0aGlzKSlyZXR1cm4gdGhpczthPV8oYSx0aGlzKTt2YXIgYj1yKHRoaXMucmVxdWlyZUZhaWwsYSk7cmV0dXJuIGI+LTEmJnRoaXMucmVxdWlyZUZhaWwuc3BsaWNlKGIsMSksdGhpc30saGFzUmVxdWlyZUZhaWx1cmVzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVxdWlyZUZhaWwubGVuZ3RoPjB9LGNhblJlY29nbml6ZVdpdGg6ZnVuY3Rpb24oYSl7cmV0dXJuISF0aGlzLnNpbXVsdGFuZW91c1thLmlkXX0sZW1pdDpmdW5jdGlvbihhKXtmdW5jdGlvbiBiKGIpe2MubWFuYWdlci5lbWl0KGIsYSl9dmFyIGM9dGhpcyxkPXRoaXMuc3RhdGU7cWI+ZCYmYihjLm9wdGlvbnMuZXZlbnQrWihkKSksYihjLm9wdGlvbnMuZXZlbnQpLGEuYWRkaXRpb25hbEV2ZW50JiZiKGEuYWRkaXRpb25hbEV2ZW50KSxkPj1xYiYmYihjLm9wdGlvbnMuZXZlbnQrWihkKSl9LHRyeUVtaXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuY2FuRW1pdCgpP3RoaXMuZW1pdChhKTp2b2lkKHRoaXMuc3RhdGU9dGIpfSxjYW5FbWl0OmZ1bmN0aW9uKCl7Zm9yKHZhciBhPTA7YTx0aGlzLnJlcXVpcmVGYWlsLmxlbmd0aDspe2lmKCEodGhpcy5yZXF1aXJlRmFpbFthXS5zdGF0ZSYodGJ8bmIpKSlyZXR1cm4hMTthKyt9cmV0dXJuITB9LHJlY29nbml6ZTpmdW5jdGlvbihhKXt2YXIgYj1sYSh7fSxhKTtyZXR1cm4gayh0aGlzLm9wdGlvbnMuZW5hYmxlLFt0aGlzLGJdKT8odGhpcy5zdGF0ZSYocmJ8c2J8dGIpJiYodGhpcy5zdGF0ZT1uYiksdGhpcy5zdGF0ZT10aGlzLnByb2Nlc3MoYiksdm9pZCh0aGlzLnN0YXRlJihvYnxwYnxxYnxzYikmJnRoaXMudHJ5RW1pdChiKSkpOih0aGlzLnJlc2V0KCksdm9pZCh0aGlzLnN0YXRlPXRiKSl9LHByb2Nlc3M6ZnVuY3Rpb24oYSl7fSxnZXRUb3VjaEFjdGlvbjpmdW5jdGlvbigpe30scmVzZXQ6ZnVuY3Rpb24oKXt9fSxpKGFhLFkse2RlZmF1bHRzOntwb2ludGVyczoxfSxhdHRyVGVzdDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLm9wdGlvbnMucG9pbnRlcnM7cmV0dXJuIDA9PT1ifHxhLnBvaW50ZXJzLmxlbmd0aD09PWJ9LHByb2Nlc3M6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5zdGF0ZSxjPWEuZXZlbnRUeXBlLGQ9YiYob2J8cGIpLGU9dGhpcy5hdHRyVGVzdChhKTtyZXR1cm4gZCYmKGMmSGF8fCFlKT9ifHNiOmR8fGU/YyZHYT9ifHFiOmImb2I/YnxwYjpvYjp0Yn19KSxpKGJhLGFhLHtkZWZhdWx0czp7ZXZlbnQ6XCJwYW5cIix0aHJlc2hvbGQ6MTAscG9pbnRlcnM6MSxkaXJlY3Rpb246UGF9LGdldFRvdWNoQWN0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vcHRpb25zLmRpcmVjdGlvbixiPVtdO3JldHVybiBhJk5hJiZiLnB1c2gobGIpLGEmT2EmJmIucHVzaChrYiksYn0sZGlyZWN0aW9uVGVzdDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLm9wdGlvbnMsYz0hMCxkPWEuZGlzdGFuY2UsZT1hLmRpcmVjdGlvbixmPWEuZGVsdGFYLGc9YS5kZWx0YVk7cmV0dXJuIGUmYi5kaXJlY3Rpb258fChiLmRpcmVjdGlvbiZOYT8oZT0wPT09Zj9JYTowPmY/SmE6S2EsYz1mIT10aGlzLnBYLGQ9TWF0aC5hYnMoYS5kZWx0YVgpKTooZT0wPT09Zz9JYTowPmc/TGE6TWEsYz1nIT10aGlzLnBZLGQ9TWF0aC5hYnMoYS5kZWx0YVkpKSksYS5kaXJlY3Rpb249ZSxjJiZkPmIudGhyZXNob2xkJiZlJmIuZGlyZWN0aW9ufSxhdHRyVGVzdDpmdW5jdGlvbihhKXtyZXR1cm4gYWEucHJvdG90eXBlLmF0dHJUZXN0LmNhbGwodGhpcyxhKSYmKHRoaXMuc3RhdGUmb2J8fCEodGhpcy5zdGF0ZSZvYikmJnRoaXMuZGlyZWN0aW9uVGVzdChhKSl9LGVtaXQ6ZnVuY3Rpb24oYSl7dGhpcy5wWD1hLmRlbHRhWCx0aGlzLnBZPWEuZGVsdGFZO3ZhciBiPSQoYS5kaXJlY3Rpb24pO2ImJihhLmFkZGl0aW9uYWxFdmVudD10aGlzLm9wdGlvbnMuZXZlbnQrYiksdGhpcy5fc3VwZXIuZW1pdC5jYWxsKHRoaXMsYSl9fSksaShjYSxhYSx7ZGVmYXVsdHM6e2V2ZW50OlwicGluY2hcIix0aHJlc2hvbGQ6MCxwb2ludGVyczoyfSxnZXRUb3VjaEFjdGlvbjpmdW5jdGlvbigpe3JldHVybltqYl19LGF0dHJUZXN0OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLl9zdXBlci5hdHRyVGVzdC5jYWxsKHRoaXMsYSkmJihNYXRoLmFicyhhLnNjYWxlLTEpPnRoaXMub3B0aW9ucy50aHJlc2hvbGR8fHRoaXMuc3RhdGUmb2IpfSxlbWl0OmZ1bmN0aW9uKGEpe2lmKDEhPT1hLnNjYWxlKXt2YXIgYj1hLnNjYWxlPDE/XCJpblwiOlwib3V0XCI7YS5hZGRpdGlvbmFsRXZlbnQ9dGhpcy5vcHRpb25zLmV2ZW50K2J9dGhpcy5fc3VwZXIuZW1pdC5jYWxsKHRoaXMsYSl9fSksaShkYSxZLHtkZWZhdWx0czp7ZXZlbnQ6XCJwcmVzc1wiLHBvaW50ZXJzOjEsdGltZToyNTEsdGhyZXNob2xkOjl9LGdldFRvdWNoQWN0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuW2hiXX0scHJvY2VzczpmdW5jdGlvbihhKXt2YXIgYj10aGlzLm9wdGlvbnMsYz1hLnBvaW50ZXJzLmxlbmd0aD09PWIucG9pbnRlcnMsZD1hLmRpc3RhbmNlPGIudGhyZXNob2xkLGY9YS5kZWx0YVRpbWU+Yi50aW1lO2lmKHRoaXMuX2lucHV0PWEsIWR8fCFjfHxhLmV2ZW50VHlwZSYoR2F8SGEpJiYhZil0aGlzLnJlc2V0KCk7ZWxzZSBpZihhLmV2ZW50VHlwZSZFYSl0aGlzLnJlc2V0KCksdGhpcy5fdGltZXI9ZShmdW5jdGlvbigpe3RoaXMuc3RhdGU9cmIsdGhpcy50cnlFbWl0KCl9LGIudGltZSx0aGlzKTtlbHNlIGlmKGEuZXZlbnRUeXBlJkdhKXJldHVybiByYjtyZXR1cm4gdGJ9LHJlc2V0OmZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVyKX0sZW1pdDpmdW5jdGlvbihhKXt0aGlzLnN0YXRlPT09cmImJihhJiZhLmV2ZW50VHlwZSZHYT90aGlzLm1hbmFnZXIuZW1pdCh0aGlzLm9wdGlvbnMuZXZlbnQrXCJ1cFwiLGEpOih0aGlzLl9pbnB1dC50aW1lU3RhbXA9cmEoKSx0aGlzLm1hbmFnZXIuZW1pdCh0aGlzLm9wdGlvbnMuZXZlbnQsdGhpcy5faW5wdXQpKSl9fSksaShlYSxhYSx7ZGVmYXVsdHM6e2V2ZW50Olwicm90YXRlXCIsdGhyZXNob2xkOjAscG9pbnRlcnM6Mn0sZ2V0VG91Y2hBY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm5bamJdfSxhdHRyVGVzdDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5fc3VwZXIuYXR0clRlc3QuY2FsbCh0aGlzLGEpJiYoTWF0aC5hYnMoYS5yb3RhdGlvbik+dGhpcy5vcHRpb25zLnRocmVzaG9sZHx8dGhpcy5zdGF0ZSZvYil9fSksaShmYSxhYSx7ZGVmYXVsdHM6e2V2ZW50Olwic3dpcGVcIix0aHJlc2hvbGQ6MTAsdmVsb2NpdHk6LjMsZGlyZWN0aW9uOk5hfE9hLHBvaW50ZXJzOjF9LGdldFRvdWNoQWN0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGJhLnByb3RvdHlwZS5nZXRUb3VjaEFjdGlvbi5jYWxsKHRoaXMpfSxhdHRyVGVzdDpmdW5jdGlvbihhKXt2YXIgYixjPXRoaXMub3B0aW9ucy5kaXJlY3Rpb247cmV0dXJuIGMmKE5hfE9hKT9iPWEub3ZlcmFsbFZlbG9jaXR5OmMmTmE/Yj1hLm92ZXJhbGxWZWxvY2l0eVg6YyZPYSYmKGI9YS5vdmVyYWxsVmVsb2NpdHlZKSx0aGlzLl9zdXBlci5hdHRyVGVzdC5jYWxsKHRoaXMsYSkmJmMmYS5vZmZzZXREaXJlY3Rpb24mJmEuZGlzdGFuY2U+dGhpcy5vcHRpb25zLnRocmVzaG9sZCYmYS5tYXhQb2ludGVycz09dGhpcy5vcHRpb25zLnBvaW50ZXJzJiZxYShiKT50aGlzLm9wdGlvbnMudmVsb2NpdHkmJmEuZXZlbnRUeXBlJkdhfSxlbWl0OmZ1bmN0aW9uKGEpe3ZhciBiPSQoYS5vZmZzZXREaXJlY3Rpb24pO2ImJnRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCtiLGEpLHRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCxhKX19KSxpKGdhLFkse2RlZmF1bHRzOntldmVudDpcInRhcFwiLHBvaW50ZXJzOjEsdGFwczoxLGludGVydmFsOjMwMCx0aW1lOjI1MCx0aHJlc2hvbGQ6OSxwb3NUaHJlc2hvbGQ6MTB9LGdldFRvdWNoQWN0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuW2liXX0scHJvY2VzczpmdW5jdGlvbihhKXt2YXIgYj10aGlzLm9wdGlvbnMsYz1hLnBvaW50ZXJzLmxlbmd0aD09PWIucG9pbnRlcnMsZD1hLmRpc3RhbmNlPGIudGhyZXNob2xkLGY9YS5kZWx0YVRpbWU8Yi50aW1lO2lmKHRoaXMucmVzZXQoKSxhLmV2ZW50VHlwZSZFYSYmMD09PXRoaXMuY291bnQpcmV0dXJuIHRoaXMuZmFpbFRpbWVvdXQoKTtpZihkJiZmJiZjKXtpZihhLmV2ZW50VHlwZSE9R2EpcmV0dXJuIHRoaXMuZmFpbFRpbWVvdXQoKTt2YXIgZz10aGlzLnBUaW1lP2EudGltZVN0YW1wLXRoaXMucFRpbWU8Yi5pbnRlcnZhbDohMCxoPSF0aGlzLnBDZW50ZXJ8fEgodGhpcy5wQ2VudGVyLGEuY2VudGVyKTxiLnBvc1RocmVzaG9sZDt0aGlzLnBUaW1lPWEudGltZVN0YW1wLHRoaXMucENlbnRlcj1hLmNlbnRlcixoJiZnP3RoaXMuY291bnQrPTE6dGhpcy5jb3VudD0xLHRoaXMuX2lucHV0PWE7dmFyIGk9dGhpcy5jb3VudCViLnRhcHM7aWYoMD09PWkpcmV0dXJuIHRoaXMuaGFzUmVxdWlyZUZhaWx1cmVzKCk/KHRoaXMuX3RpbWVyPWUoZnVuY3Rpb24oKXt0aGlzLnN0YXRlPXJiLHRoaXMudHJ5RW1pdCgpfSxiLmludGVydmFsLHRoaXMpLG9iKTpyYn1yZXR1cm4gdGJ9LGZhaWxUaW1lb3V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3RpbWVyPWUoZnVuY3Rpb24oKXt0aGlzLnN0YXRlPXRifSx0aGlzLm9wdGlvbnMuaW50ZXJ2YWwsdGhpcyksdGJ9LHJlc2V0OmZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVyKX0sZW1pdDpmdW5jdGlvbigpe3RoaXMuc3RhdGU9PXJiJiYodGhpcy5faW5wdXQudGFwQ291bnQ9dGhpcy5jb3VudCx0aGlzLm1hbmFnZXIuZW1pdCh0aGlzLm9wdGlvbnMuZXZlbnQsdGhpcy5faW5wdXQpKX19KSxoYS5WRVJTSU9OPVwiMi4wLjdcIixoYS5kZWZhdWx0cz17ZG9tRXZlbnRzOiExLHRvdWNoQWN0aW9uOmdiLGVuYWJsZTohMCxpbnB1dFRhcmdldDpudWxsLGlucHV0Q2xhc3M6bnVsbCxwcmVzZXQ6W1tlYSx7ZW5hYmxlOiExfV0sW2NhLHtlbmFibGU6ITF9LFtcInJvdGF0ZVwiXV0sW2ZhLHtkaXJlY3Rpb246TmF9XSxbYmEse2RpcmVjdGlvbjpOYX0sW1wic3dpcGVcIl1dLFtnYV0sW2dhLHtldmVudDpcImRvdWJsZXRhcFwiLHRhcHM6Mn0sW1widGFwXCJdXSxbZGFdXSxjc3NQcm9wczp7dXNlclNlbGVjdDpcIm5vbmVcIix0b3VjaFNlbGVjdDpcIm5vbmVcIix0b3VjaENhbGxvdXQ6XCJub25lXCIsY29udGVudFpvb21pbmc6XCJub25lXCIsdXNlckRyYWc6XCJub25lXCIsdGFwSGlnaGxpZ2h0Q29sb3I6XCJyZ2JhKDAsMCwwLDApXCJ9fTt2YXIgdWI9MSx2Yj0yO2lhLnByb3RvdHlwZT17c2V0OmZ1bmN0aW9uKGEpe3JldHVybiBsYSh0aGlzLm9wdGlvbnMsYSksYS50b3VjaEFjdGlvbiYmdGhpcy50b3VjaEFjdGlvbi51cGRhdGUoKSxhLmlucHV0VGFyZ2V0JiYodGhpcy5pbnB1dC5kZXN0cm95KCksdGhpcy5pbnB1dC50YXJnZXQ9YS5pbnB1dFRhcmdldCx0aGlzLmlucHV0LmluaXQoKSksdGhpc30sc3RvcDpmdW5jdGlvbihhKXt0aGlzLnNlc3Npb24uc3RvcHBlZD1hP3ZiOnVifSxyZWNvZ25pemU6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5zZXNzaW9uO2lmKCFiLnN0b3BwZWQpe3RoaXMudG91Y2hBY3Rpb24ucHJldmVudERlZmF1bHRzKGEpO3ZhciBjLGQ9dGhpcy5yZWNvZ25pemVycyxlPWIuY3VyUmVjb2duaXplcjsoIWV8fGUmJmUuc3RhdGUmcmIpJiYoZT1iLmN1clJlY29nbml6ZXI9bnVsbCk7Zm9yKHZhciBmPTA7ZjxkLmxlbmd0aDspYz1kW2ZdLGIuc3RvcHBlZD09PXZifHxlJiZjIT1lJiYhYy5jYW5SZWNvZ25pemVXaXRoKGUpP2MucmVzZXQoKTpjLnJlY29nbml6ZShhKSwhZSYmYy5zdGF0ZSYob2J8cGJ8cWIpJiYoZT1iLmN1clJlY29nbml6ZXI9YyksZisrfX0sZ2V0OmZ1bmN0aW9uKGEpe2lmKGEgaW5zdGFuY2VvZiBZKXJldHVybiBhO2Zvcih2YXIgYj10aGlzLnJlY29nbml6ZXJzLGM9MDtjPGIubGVuZ3RoO2MrKylpZihiW2NdLm9wdGlvbnMuZXZlbnQ9PWEpcmV0dXJuIGJbY107cmV0dXJuIG51bGx9LGFkZDpmdW5jdGlvbihhKXtpZihmKGEsXCJhZGRcIix0aGlzKSlyZXR1cm4gdGhpczt2YXIgYj10aGlzLmdldChhLm9wdGlvbnMuZXZlbnQpO3JldHVybiBiJiZ0aGlzLnJlbW92ZShiKSx0aGlzLnJlY29nbml6ZXJzLnB1c2goYSksYS5tYW5hZ2VyPXRoaXMsdGhpcy50b3VjaEFjdGlvbi51cGRhdGUoKSxhfSxyZW1vdmU6ZnVuY3Rpb24oYSl7aWYoZihhLFwicmVtb3ZlXCIsdGhpcykpcmV0dXJuIHRoaXM7aWYoYT10aGlzLmdldChhKSl7dmFyIGI9dGhpcy5yZWNvZ25pemVycyxjPXIoYixhKTstMSE9PWMmJihiLnNwbGljZShjLDEpLHRoaXMudG91Y2hBY3Rpb24udXBkYXRlKCkpfXJldHVybiB0aGlzfSxvbjpmdW5jdGlvbihhLGIpe2lmKGEhPT1kJiZiIT09ZCl7dmFyIGM9dGhpcy5oYW5kbGVycztyZXR1cm4gZyhxKGEpLGZ1bmN0aW9uKGEpe2NbYV09Y1thXXx8W10sY1thXS5wdXNoKGIpfSksdGhpc319LG9mZjpmdW5jdGlvbihhLGIpe2lmKGEhPT1kKXt2YXIgYz10aGlzLmhhbmRsZXJzO3JldHVybiBnKHEoYSksZnVuY3Rpb24oYSl7Yj9jW2FdJiZjW2FdLnNwbGljZShyKGNbYV0sYiksMSk6ZGVsZXRlIGNbYV19KSx0aGlzfX0sZW1pdDpmdW5jdGlvbihhLGIpe3RoaXMub3B0aW9ucy5kb21FdmVudHMmJmthKGEsYik7dmFyIGM9dGhpcy5oYW5kbGVyc1thXSYmdGhpcy5oYW5kbGVyc1thXS5zbGljZSgpO2lmKGMmJmMubGVuZ3RoKXtiLnR5cGU9YSxiLnByZXZlbnREZWZhdWx0PWZ1bmN0aW9uKCl7Yi5zcmNFdmVudC5wcmV2ZW50RGVmYXVsdCgpfTtmb3IodmFyIGQ9MDtkPGMubGVuZ3RoOyljW2RdKGIpLGQrK319LGRlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQmJmphKHRoaXMsITEpLHRoaXMuaGFuZGxlcnM9e30sdGhpcy5zZXNzaW9uPXt9LHRoaXMuaW5wdXQuZGVzdHJveSgpLHRoaXMuZWxlbWVudD1udWxsfX0sbGEoaGEse0lOUFVUX1NUQVJUOkVhLElOUFVUX01PVkU6RmEsSU5QVVRfRU5EOkdhLElOUFVUX0NBTkNFTDpIYSxTVEFURV9QT1NTSUJMRTpuYixTVEFURV9CRUdBTjpvYixTVEFURV9DSEFOR0VEOnBiLFNUQVRFX0VOREVEOnFiLFNUQVRFX1JFQ09HTklaRUQ6cmIsU1RBVEVfQ0FOQ0VMTEVEOnNiLFNUQVRFX0ZBSUxFRDp0YixESVJFQ1RJT05fTk9ORTpJYSxESVJFQ1RJT05fTEVGVDpKYSxESVJFQ1RJT05fUklHSFQ6S2EsRElSRUNUSU9OX1VQOkxhLERJUkVDVElPTl9ET1dOOk1hLERJUkVDVElPTl9IT1JJWk9OVEFMOk5hLERJUkVDVElPTl9WRVJUSUNBTDpPYSxESVJFQ1RJT05fQUxMOlBhLE1hbmFnZXI6aWEsSW5wdXQ6eCxUb3VjaEFjdGlvbjpWLFRvdWNoSW5wdXQ6UCxNb3VzZUlucHV0OkwsUG9pbnRlckV2ZW50SW5wdXQ6TSxUb3VjaE1vdXNlSW5wdXQ6UixTaW5nbGVUb3VjaElucHV0Ok4sUmVjb2duaXplcjpZLEF0dHJSZWNvZ25pemVyOmFhLFRhcDpnYSxQYW46YmEsU3dpcGU6ZmEsUGluY2g6Y2EsUm90YXRlOmVhLFByZXNzOmRhLG9uOm0sb2ZmOm4sZWFjaDpnLG1lcmdlOnRhLGV4dGVuZDpzYSxhc3NpZ246bGEsaW5oZXJpdDppLGJpbmRGbjpqLHByZWZpeGVkOnV9KTt2YXIgd2I9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGE/YTpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOnt9O3diLkhhbW1lcj1oYSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGZ1bmN0aW9uKCl7cmV0dXJuIGhhfSk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9aGE6YVtjXT1oYX0od2luZG93LGRvY3VtZW50LFwiSGFtbWVyXCIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFtbWVyLm1pbi5qcy5tYXAiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/*! modernizr 3.3.1 (Custom Build) | MIT *
 * https://modernizr.com/download/?-csstransforms-csstransforms3d-preserve3d-setclasses !*/
!function (e, n, t) {
    function r(e, n) {
        return (typeof e === "undefined" ? "undefined" : _typeof(e)) === n;
    }function s() {
        var e, n, t, s, o, i, a;for (var f in C) {
            if (C.hasOwnProperty(f)) {
                if (e = [], n = C[f], n.name && (e.push(n.name.toLowerCase()), n.options && n.options.aliases && n.options.aliases.length)) for (t = 0; t < n.options.aliases.length; t++) {
                    e.push(n.options.aliases[t].toLowerCase());
                }for (s = r(n.fn, "function") ? n.fn() : n.fn, o = 0; o < e.length; o++) {
                    i = e[o], a = i.split("."), 1 === a.length ? Modernizr[a[0]] = s : (!Modernizr[a[0]] || Modernizr[a[0]] instanceof Boolean || (Modernizr[a[0]] = new Boolean(Modernizr[a[0]])), Modernizr[a[0]][a[1]] = s), y.push((s ? "" : "no-") + a.join("-"));
                }
            }
        }
    }function o(e) {
        var n = x.className,
            t = Modernizr._config.classPrefix || "";if (S && (n = n.baseVal), Modernizr._config.enableJSClass) {
            var r = new RegExp("(^|\\s)" + t + "no-js(\\s|$)");n = n.replace(r, "$1" + t + "js$2");
        }Modernizr._config.enableClasses && (n += " " + t + e.join(" " + t), S ? x.className.baseVal = n : x.className = n);
    }function i() {
        return "function" != typeof n.createElement ? n.createElement(arguments[0]) : S ? n.createElementNS.call(n, "http://www.w3.org/2000/svg", arguments[0]) : n.createElement.apply(n, arguments);
    }function a() {
        var e = n.body;return e || (e = i(S ? "svg" : "body"), e.fake = !0), e;
    }function f(e, t, r, s) {
        var o,
            f,
            l,
            d,
            u = "modernizr",
            p = i("div"),
            c = a();if (parseInt(r, 10)) for (; r--;) {
            l = i("div"), l.id = s ? s[r] : u + (r + 1), p.appendChild(l);
        }return o = i("style"), o.type = "text/css", o.id = "s" + u, (c.fake ? c : p).appendChild(o), c.appendChild(p), o.styleSheet ? o.styleSheet.cssText = e : o.appendChild(n.createTextNode(e)), p.id = u, c.fake && (c.style.background = "", c.style.overflow = "hidden", d = x.style.overflow, x.style.overflow = "hidden", x.appendChild(c)), f = t(p, e), c.fake ? (c.parentNode.removeChild(c), x.style.overflow = d, x.offsetHeight) : p.parentNode.removeChild(p), !!f;
    }function l(e, n) {
        return !!~("" + e).indexOf(n);
    }function d(e) {
        return e.replace(/([a-z])-([a-z])/g, function (e, n, t) {
            return n + t.toUpperCase();
        }).replace(/^-/, "");
    }function u(e, n) {
        return function () {
            return e.apply(n, arguments);
        };
    }function p(e, n, t) {
        var s;for (var o in e) {
            if (e[o] in n) return t === !1 ? e[o] : (s = n[e[o]], r(s, "function") ? u(s, t || n) : s);
        }return !1;
    }function c(e) {
        return e.replace(/([A-Z])/g, function (e, n) {
            return "-" + n.toLowerCase();
        }).replace(/^ms-/, "-ms-");
    }function m(n, r) {
        var s = n.length;if ("CSS" in e && "supports" in e.CSS) {
            for (; s--;) {
                if (e.CSS.supports(c(n[s]), r)) return !0;
            }return !1;
        }if ("CSSSupportsRule" in e) {
            for (var o = []; s--;) {
                o.push("(" + c(n[s]) + ":" + r + ")");
            }return o = o.join(" or "), f("@supports (" + o + ") { #modernizr { position: absolute; } }", function (e) {
                return "absolute" == getComputedStyle(e, null).position;
            });
        }return t;
    }function h(e, n, s, o) {
        function a() {
            u && (delete N.style, delete N.modElem);
        }if (o = r(o, "undefined") ? !1 : o, !r(s, "undefined")) {
            var f = m(e, s);if (!r(f, "undefined")) return f;
        }for (var u, p, c, h, g, v = ["modernizr", "tspan", "samp"]; !N.style && v.length;) {
            u = !0, N.modElem = i(v.shift()), N.style = N.modElem.style;
        }for (c = e.length, p = 0; c > p; p++) {
            if (h = e[p], g = N.style[h], l(h, "-") && (h = d(h)), N.style[h] !== t) {
                if (o || r(s, "undefined")) return a(), "pfx" == n ? h : !0;try {
                    N.style[h] = s;
                } catch (y) {}if (N.style[h] != g) return a(), "pfx" == n ? h : !0;
            }
        }return a(), !1;
    }function g(e, n, t, s, o) {
        var i = e.charAt(0).toUpperCase() + e.slice(1),
            a = (e + " " + k.join(i + " ") + i).split(" ");return r(n, "string") || r(n, "undefined") ? h(a, n, s, o) : (a = (e + " " + z.join(i + " ") + i).split(" "), p(a, n, t));
    }function v(e, n, r) {
        return g(e, t, t, n, r);
    }var y = [],
        C = [],
        w = { _version: "3.3.1", _config: { classPrefix: "", enableClasses: !0, enableJSClass: !0, usePrefixes: !0 }, _q: [], on: function on(e, n) {
            var t = this;setTimeout(function () {
                n(t[e]);
            }, 0);
        }, addTest: function addTest(e, n, t) {
            C.push({ name: e, fn: n, options: t });
        }, addAsyncTest: function addAsyncTest(e) {
            C.push({ name: null, fn: e });
        } },
        Modernizr = function Modernizr() {};Modernizr.prototype = w, Modernizr = new Modernizr();var x = n.documentElement,
        S = "svg" === x.nodeName.toLowerCase(),
        _ = "CSS" in e && "supports" in e.CSS,
        b = "supportsCSS" in e;Modernizr.addTest("supports", _ || b), Modernizr.addTest("preserve3d", function () {
        var e = i("a"),
            n = i("a");e.style.cssText = "display: block; transform-style: preserve-3d; transform-origin: right; transform: rotateY(40deg);", n.style.cssText = "display: block; width: 9px; height: 1px; background: #000; transform-origin: right; transform: rotateY(40deg);", e.appendChild(n), x.appendChild(e);var t = n.getBoundingClientRect();return x.removeChild(e), t.width && t.width < 4;
    });var T = w.testStyles = f,
        P = "Moz O ms Webkit",
        k = w._config.usePrefixes ? P.split(" ") : [];w._cssomPrefixes = k;var z = w._config.usePrefixes ? P.toLowerCase().split(" ") : [];w._domPrefixes = z;var E = { elem: i("modernizr") };Modernizr._q.push(function () {
        delete E.elem;
    });var N = { style: E.elem.style };Modernizr._q.unshift(function () {
        delete N.style;
    }), w.testAllProps = g, w.testAllProps = v, Modernizr.addTest("csstransforms3d", function () {
        var e = !!v("perspective", "1px", !0),
            n = Modernizr._config.usePrefixes;if (e && (!n || "webkitPerspective" in x.style)) {
            var t,
                r = "#modernizr{width:0;height:0}";Modernizr.supports ? t = "@supports (perspective: 1px)" : (t = "@media (transform-3d)", n && (t += ",(-webkit-transform-3d)")), t += "{#modernizr{width:7px;height:18px;margin:0;padding:0;border:0}}", T(r + t, function (n) {
                e = 7 === n.offsetWidth && 18 === n.offsetHeight;
            });
        }return e;
    }), Modernizr.addTest("csstransforms", function () {
        return -1 === navigator.userAgent.indexOf("Android 2.") && v("transform", "scale(1)", !0);
    }), s(), o(y), delete w.addTest, delete w.addAsyncTest;for (var A = 0; A < Modernizr._q.length; A++) {
        Modernizr._q[A]();
    }e.Modernizr = Modernizr;
}(window, document);
(function () {
    var lastTime = 0;
    var vendors = ['ms', 'moz', 'webkit', 'o'];
    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
    }

    if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback, element) {
        var currTime = new Date().getTime();
        var timeToCall = Math.max(0, 16 - (currTime - lastTime));
        var id = window.setTimeout(function () {
            callback(currTime + timeToCall);
        }, timeToCall);
        lastTime = currTime + timeToCall;
        return id;
    };

    if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {
        clearTimeout(id);
    };
})();
//# sourceMappingURL=data:application/json;base64,

'use strict';

/*!
 *
 *  Web Starter Kit
 *  Copyright 2015 Google Inc. All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License
 *
 */
/* eslint-env browser */
(function () {
  'use strict';

  // Check to make sure service workers are supported in the current browser,
  // and that the current page is accessed from a secure origin. Using a
  // service worker from an insecure origin will trigger JS console errors. See
  // http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features

  var isLocalhost = Boolean(window.location.hostname === 'localhost' ||
  // [::1] is the IPv6 localhost address.
  window.location.hostname === '[::1]' ||
  // 127.0.0.1/8 is considered localhost for IPv4.
  window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));

  var open = false;

  var SwipeQuestionManager = function () {
    function Main(question, handler) {
      var self = this;
      this.container = question;
      this.anim = null;
      this.isSwiping = false;
      this.handler = handler;
      this.defaultPosition = 0;
      this.toggleDelta = -80;
      this.previousPosition = 0;

      this.mc = Hammer(question);
      this.mc.get('pan').set({ direction: Hammer.DIRECTION_HORIZONTAL });
      this.mc.on('panstart panleft panend', function (ev) {
        self.handlePan(ev);
      });
    }

    Main.prototype.handlePan = function (ev) {
      var self = this;
      switch (ev.type) {
        case "panstart":
          self.handlePanStart(ev);
          break;
        case "panend":
          self.handlePanEnd(ev);
          break;
        case "panleft":
          self.handlePanLeft(ev);
          break;
        case "panright":
          self.handlePanRight(ev);
          break;
      }
    };

    Main.prototype.handlePanStart = function (ev) {};
    Main.prototype.handlePanEnd = function (ev) {
      var self = this;
      if (!this.isSwiping) {
        return;
      }
      if (ev.deltaX < 0) {
        this.previousPosition = this.previousPosition - ev.distance;
      } else {
        this.previousPosition = this.previousPosition + ev.distance;
      }

      if (ev.deltaX <= this.toggleDelta) {
        console.log('toggled');
        this.handler.call(this, ev);
      }

      cancelAnimationFrame(this._anim);
      this.resetPositionToDefault();
    };
    Main.prototype.handlePanLeft = function (ev) {
      var self = this;
      this.isSwiping = true;
      if (!this._anim) {
        this.updatePosition();
      }
      this.defaultPosition = this.previousPosition + ev.deltaX * 1;
      ev.preventDefault();
    };
    Main.prototype.handlePanRight = function (ev) {
      var self = this;
      this.isSwiping = true;
      if (!this._anim) {
        this.updatePosition();
      }
      ev.preventDefault();
      this.defaultPosition = this.previousPosition + ev.deltaX * 1;
    };

    Main.prototype.resetPosition = function () {
      var self = this;
      cancelAnimationFrame(this._anim);
      this._anim = null;
      this.isSwiping = false;
    };

    Main.prototype.setPosition = function (position) {
      var self = this;
      this.container.style.transform = 'translate3d(' + position + 'px,0px,0)';
    };

    Main.prototype.resetPositionToDefault = function () {
      var _this = this;

      var self = this;
      if (this.previousPosition <= 10) {
        this.previousPosition = this.previousPosition + 10;
        this.setPosition(this.previousPosition);
        this.anim = requestAnimationFrame(function () {
          _this.resetPositionToDefault();
        });
      } else {
        this.setPosition(0);
        this.resetPosition();
      }
    };
    Main.prototype.updatePosition = function (position) {
      var self = this;
      this.setPosition(self.defaultPosition);
      this._anim = requestAnimationFrame(function () {
        self.updatePosition();
      });
    };

    return Main;
  }();

  var question = document.getElementById('question');
  var swipe = new SwipeQuestionManager(question);

  swipe.handler = function (ev) {
    console.log(ev.target);
    if (!open) {
      window.animation = anime({
        targets: '.help-text-1',
        marginTop: {
          value: [0, 10],
          duration: 300,
          delay: 500,
          easing: 'easeInOutExpo'
        },
        marginBottom: {
          value: [0, 5],
          delay: 500,
          duration: 300,
          easing: 'easeInOutExpo'
        },
        maxHeight: {
          value: ['0%', '100%'],
          duration: 300,
          delay: 500
        },
        opacity: {
          value: [0, 1],
          delay: 500,
          duration: 350,
          easing: 'easeInOutExpo'
        }
      });
      open = true;
    } else {
      var elements = document.getElementsByClassName('help-text');
      for (var i = 0; i < elements.length; i++) {
        console.log(elements[i]);
        elements[i].removeAttribute('style');
      }
      open = false;
    }
  };

  // Your custom JavaScript goes here
})();
//# sourceMappingURL=data:application/json;base64,

//# sourceMappingURL=main.min.js.map
